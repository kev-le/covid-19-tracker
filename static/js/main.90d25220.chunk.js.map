{"version":3,"sources":["reducers/index.js","actions/covid.js","reducers/covid.js","store.js","components/GlobalCards/index.js","containers/GlobalSummaryPage/index.js","components/TableIcons/index.js","containers/CountryPage/index.js","containers/GlobalTablePage/index.js","containers/app/App.js","serviceWorker.js","index.js"],"names":["history","getGlobalSummary","dispatch","type","axios","get","then","res","payload","data","catch","err","getGlobalDaily","getCountryCodes","getCountryStats","isoCode","countryText","selectedCountry","getCountryRegionStats","getAllCountryStats","compiledCountries","countryList","i","length","countryRegion","active","recovered","deaths","confirmed","Object","values","initialStateGlobalDaily","confirmedList","isLoading","initialStateStats","yesterday","cases","critical","error","updated","initialStateCountryCodes","initialStateAllCountry","initialStateCountryRegion","regionList","combineReducers","globalDaily","state","action","globalSummary","countryCodes","countries","countryStats","allCountry","createBrowserHistory","basename","process","middleware","thunk","routerMiddleware","composedEnhancers","compose","applyMiddleware","createStore","router","connectRouter","covid","covidReducer","GlobalCards","x","toString","replace","recoverPercentage","deathPercentage","yesterdayCases","yesterdayDeaths","yesterdayRecovered","this","props","toFixed","undefined","className","Statistic","color","Value","start","end","duration","separator","delay","countUpRef","ref","Label","shouldLoadLabel","useEasing","Component","connect","GlobalSummaryPage","componentDidMount","dateLabels","casesData","list","push","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Divider","horizontal","Header","as","Icon","name","textAlign","format","withTitle","Segment","basic","Dimmer","inverted","Loader","options","title","display","text","fontSize","fontColor","bindActionCreators","goBack","Add","forwardRef","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","CountryPage","getCountryObject","country","key","iso2","toLowerCase","value","flag","getRegionObject","region","provinceState","getFilterRegions","filteredRegions","handleDropdown","e","target","textContent","countryOptions","tableData","regions","Dropdown","fluid","search","selection","onChange","Message","negative","rowStyle","height","padding","sorting","pageSize","icons","TableIcons","columns","field","GlobalTablePage","iso3","iso","lastUpdated","lastUpdate","render","rowData","Flag","defaultSort","App","activeItem","handleItemClick","setState","Menu","secondary","Item","onClick","to","exact","path","component","Boolean","window","location","hostname","match","document","querySelector","store","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"mLAIgBA,E,oFC8BHC,EAAmB,WAC5B,OAAO,SAAAC,GAKH,OAJAA,EAAS,CACLC,KAnCyB,0BAsCtBC,IAAMC,IAAI,6BAA6BC,MAAK,SAAAC,GAK/C,OAJAL,EAAS,CACLC,KAvC0B,4BAwC1BK,QAASD,EAAIE,OAEVL,IAAMC,IAAI,4CAA4CC,MAAK,SAAAC,GAC9DL,EAAS,CACLC,KAzC+B,sCA0C/BK,QAASD,EAAIE,UAElBC,OAAM,SAAAC,GACLT,EAAS,CACLC,KA7C6B,4CAgDtCO,OAAM,SAAAC,GACLT,EAAS,CACLC,KArDuB,iCA4D1BS,EAAiB,WAC1B,OAAO,SAAAV,GAKH,OAJAA,EAAS,CACLC,KA1DuB,wBA6DpBC,IAAMC,IAAI,wCAAwCC,MAAK,SAAAC,GAC1DL,EAAS,CACLC,KA9DwB,0BA+DxBK,QAASD,EAAIE,UAElBC,OAAM,SAAAC,GACLT,EAAS,CACLC,KAlEqB,+BAyExBU,EAAkB,WAC3B,OAAO,SAAAX,GAKH,OAJAA,EAAS,CACLC,KA1EqB,sBA6ElBC,IAAMC,IAAI,4CAA4CC,MAAK,SAAAC,GAC9DL,EAAS,CACLC,KA9EsB,wBA+EtBK,QAASD,EAAIE,UAElBC,OAAM,SAAAC,GACLT,EAAS,CACLC,KAlFmB,6BAyFtBW,EAAkB,SAACC,EAASC,GACrC,OAAO,SAAAd,GAKH,OAJAA,EAAS,CACLC,KA1FyB,0BA6FtBC,IAAMC,IAAI,mCAAqCU,GAAST,MAAK,SAAAC,GAMhE,OALAL,EAAS,CACLC,KA9F0B,4BA+F1BK,QAAQ,eAAMD,EAAIE,KAAX,CAAiBO,YAAaA,EAAaC,gBAAiBF,MAGhEX,IAAMC,IAAI,mCAAqCU,EAAU,mBAAmBT,MAAK,SAAAC,GACpFL,EAAS,CACLC,KAjG+B,sCAkG/BK,QAAQ,eAAMD,EAAIE,WAEvBC,OAAM,SAAAC,GACLT,EAAS,CACLC,KArG6B,4CAwGtCO,OAAM,SAAAC,GACLT,EAAS,CACLC,KA7GuB,0BA8GvBK,QAAS,CAAEQ,YAAaA,EAAaC,gBAAiBF,UASzDG,EAAwB,SAACH,GAClC,OAAO,SAAAb,GAKH,OAJAA,EAAS,CACLC,KArHyB,0BAwHtBC,IAAMC,IAAI,4CAA8CU,EAAU,cAAcT,MAAK,SAAAC,GACxFL,EAAS,CACLC,KAzH0B,4BA0H1BK,QAASD,EAAIE,UAElBC,OAAM,SAAAC,GACLT,EAAS,CACLC,KA7HuB,iCAoI1BgB,EAAqB,WAC9B,OAAO,SAAAjB,GAKH,OAJAA,EAAS,CACLC,KArIuB,wBAwIpBC,IAAMC,IAAI,6CAA6CC,MAAK,SAAAC,GAK/D,IAJA,IAAIa,EAAoB,GACpBC,EAAcd,EAAIE,KAGba,EAAI,EAAGA,EAAID,EAAYE,OAAQD,IAClCD,EAAYC,GAAGE,iBAAiBJ,GAGlCA,EAAkBC,EAAYC,GAAGE,eAAeC,QAAaJ,EAAYC,GAAGG,OAC5EL,EAAkBC,EAAYC,GAAGE,eAAeE,WAAaL,EAAYC,GAAGI,UAC5EN,EAAkBC,EAAYC,GAAGE,eAAeG,QAAaN,EAAYC,GAAGG,OAC5EL,EAAkBC,EAAYC,GAAGE,eAAeI,WAAaP,EAAYC,GAAGM,WAI5ER,EAAkBC,EAAYC,GAAGE,eAAiBH,EAAYC,GAIlE,IAAIb,EAAOoB,OAAOC,OAAOV,GAEzBlB,EAAS,CACLC,KA9JwB,0BA+JxBK,QAASC,OAEdC,OAAM,SAAAC,GACLT,EAAS,CACLC,KAlKqB,+BCJ/B4B,EAA0B,CAC5BC,cAAe,GACfC,WAAW,GAGTC,EAAoB,CACtBC,UAAW,CACPC,MAAO,EACPV,UAAW,EACXC,OAAQ,EACRU,SAAU,EACVJ,WAAW,GAEfG,MAAO,EACPV,UAAW,EACXC,OAAQ,EACRU,SAAU,EACVJ,WAAW,EACXK,MAAO,GACPtB,YAAa,GACbC,gBAAiB,GACjBsB,QAAS,IAIPC,EAA2B,CAC7BnB,YAAa,GACbY,WAAW,GAGTQ,EAAyB,CAC3BpB,YAAa,GACbY,WAAW,GAGTS,EAA4B,CAC9BC,WAAY,GACZV,WAAW,GA2KAW,cAAgB,CAC3BC,YAxIuB,WAA8C,IAA7CC,EAA4C,uDAApCf,EAAyBgB,EAAW,uCACpE,OAAQA,EAAO5C,MACX,ID5F2B,sBC6FvB,OAAO,eACA2C,EADP,CAEIb,WAAW,IAEnB,IDhGgC,0BCiG5B,MAAO,CACHD,cAAee,EAAOvC,QACtByB,WAAW,GAEnB,IDpG6B,wBCqGzB,OAAO,eACAa,EADP,CAEIb,WAAW,IAEnB,QACI,OAAOa,IAuHfE,cA1KyB,WAAwC,IAAvCF,EAAsC,uDAA9BZ,EAAmBa,EAAW,uCAChE,OAAQA,EAAO5C,MACX,IDlE6B,wBCmEzB,OAAO,eACA2C,EADP,CAEIb,WAAW,IAEnB,IDtEkC,4BCuE9B,OAAO,eACAc,EAAOvC,QADd,CAEIyB,WAAW,IAEnB,IDxE2C,sCCyEvC,OAAO,eACAa,EADP,CAEIX,UAAS,aAAKF,WAAW,GAAUc,EAAOvC,WAElD,ID5EyC,oCC6ErC,OAAO,eACAsC,EADP,CAEIb,WAAW,EACXK,MAAO,KAEf,IDrF+B,0BCsF3B,OAAO,eACAQ,EADP,CAEIb,WAAW,IAEnB,QACI,OAAOa,IA8IfG,aApHwB,WAA+C,IAA9CH,EAA6C,uDAArCN,EAA0BO,EAAW,uCACtE,OAAQA,EAAO5C,MACX,ID9GyB,oBC+GrB,OAAO,eACA2C,EADP,CAEIb,WAAW,IAEnB,IDlH8B,wBCmH1B,MAAO,CACHZ,YAAa0B,EAAOvC,QAAQ0C,UAC5BjB,WAAW,GAEnB,IDtH2B,sBCuHvB,OAAO,eACAa,EADP,CAEIb,WAAW,IAEnB,QACI,OAAOa,IAmGfK,aA/FwB,WAAwC,IAAvCL,EAAsC,uDAA9BZ,EAAmBa,EAAW,uCAC/D,OAAQA,EAAO5C,MACX,IDhI6B,wBCiIzB,OAAO,eACA2C,EADP,GAEOZ,EAFP,CAGID,WAAW,EACXK,MAAO,KAEf,IDtIkC,4BCuI9B,OAAO,eACAQ,EADP,GAEOC,EAAOvC,QAFd,CAGIyB,WAAW,EACXK,MAAO,KAEf,ID1I2C,sCC2IvC,OAAO,eACAQ,EADP,CAEIX,UAAS,aAAKF,WAAW,GAAUc,EAAOvC,WAElD,IDjJ+B,0BCkJ3B,OAAO,eACA0B,EADP,GAEOa,EAAOvC,QAFd,CAGIyB,WAAW,EACXhB,gBAAiB8B,EAAOvC,QAAQS,gBAChCqB,MAAO,+CAEf,IDtJyC,oCCuJrC,OAAO,eACAQ,EADP,CAEIb,WAAW,EACXK,MAAO,KAEf,QACI,OAAOQ,IA4DftB,cAvD8B,WAAgD,IAA/CsB,EAA8C,uDAAtCJ,EAA2BK,EAAW,uCAC7E,OAAQA,EAAO5C,MACX,IDlK6B,wBCmKzB,OAAO,eACA2C,EADP,CAEIb,WAAW,EACXK,MAAO,KAEf,IDvKkC,4BCwK9B,MAAO,CACHK,WAAaI,EAAOvC,QACpByB,WAAW,EACXK,MAAO,IAEf,ID5K+B,0BC6K3B,OAAO,eACAI,EADP,CAEIT,WAAW,EACXK,MAAO,KAEf,QACI,OAAOQ,IAmCfM,WA/BsB,WAA6C,IAA5CN,EAA2C,uDAAnCL,EAAwBM,EAAW,uCAClE,OAAQA,EAAO5C,MACX,IDvL2B,sBCwLvB,OAAO,eACA2C,EADP,CAEIb,WAAW,EACXK,MAAO,KAEf,ID5LgC,0BC6L5B,MAAO,CACHjB,YAAc0B,EAAOvC,QACrByB,WAAW,EACXK,MAAO,IAEf,IDjM6B,wBCkMzB,OAAO,eACAG,EADP,CAEIR,WAAW,EACXK,MAAO,KAEf,QACI,OAAOQ,M,kBChON9C,EAAUqD,YACrB,CACEC,SAAUC,sBAMRC,EAAa,CAACC,IAAOC,YAAiB1D,IAUtC2D,EAAoBC,IAAO,WAAP,GACxBC,IAAe,WAAf,EAAmBL,IADK,OAXR,KAgBHM,eHzBC9D,EG0BIA,EH1BQ4C,YAAgB,CAC1CmB,OAAQC,YAAchE,GACtBiE,MAAOC,KGMY,GAoBnBP,G,oJCtBIQ,E,+KAEaC,GACf,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,O,sCAGvClC,GACd,OAAc,IAAVA,I,+BAQJ,IAAImC,EAAoB,GACpBC,EAAkB,GAClBC,EAAiB,EACjBC,EAAkB,EAClBC,EAAqB,EA0BzB,OAxB6B,IAAzBC,KAAKC,MAAMnD,YAGb6C,EAAoB,KAFpBA,GAAsBK,KAAKC,MAAMnD,UAAYkD,KAAKC,MAAMjD,UAAW,KAAKkD,QAAQ,IAElC,KAC9CN,EAAkB,KAFlBA,GAAoBI,KAAKC,MAAMlD,OAASiD,KAAKC,MAAMjD,UAAW,KAAKkD,QAAQ,IAEjC,UAEbC,IAAzBH,KAAKC,MAAM1C,WAA4ByC,KAAKC,MAAM1C,UAAUF,WAAc2C,KAAKC,MAAM5C,YACpD,IAA/B2C,KAAKC,MAAM1C,UAAUC,QACvBqC,EAAiBG,KAAKC,MAAMjD,UAAYgD,KAAKC,MAAM1C,UAAUC,OAG3B,IAAhCwC,KAAKC,MAAM1C,UAAUR,SACvB+C,EAAkBE,KAAKC,MAAMlD,OAASiD,KAAKC,MAAM1C,UAAUR,QAGtB,IAAnCiD,KAAKC,MAAM1C,UAAUT,YACvBiD,EAAqBC,KAAKC,MAAMnD,UAAYkD,KAAKC,MAAM1C,UAAUT,aASrE,yBAAKsD,UAAWJ,KAAKC,MAAMG,WAEzB,kBAACC,EAAA,EAAD,CAAWC,MAAM,OAAOF,UAAU,cAChC,kBAACC,EAAA,EAAUE,MAAX,KACE,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKT,KAAKC,MAAMjD,UAChB0D,SAAU,EACVC,UAAU,IACVC,MAAO,IAEN,gBAAGC,EAAH,EAAGA,WAAH,OACC,6BACE,0BAAMC,IAAKD,SAKnB,kBAACR,EAAA,EAAUU,MAAX,wBACCf,KAAKgB,gBAAgBnB,IACpB,uBAAGO,UAAU,QACX,2BACI,kBAAC,IAAD,CACAI,MAAO,EACPC,IAAKZ,EACLa,SAAU,EACVC,UAAU,IACVC,MAAO,EACPK,WAAW,IAEV,gBAAGJ,EAAH,EAAGA,WAAH,OACC,iCACG,0BAAMC,IAAKD,IADd,gBASZ,kBAACR,EAAA,EAAD,CAAWC,MAAM,MAAMF,UAAU,cAC/B,kBAACC,EAAA,EAAUE,MAAX,KACE,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAKT,KAAKC,MAAMlD,OAChB2D,SAAU,EACVC,UAAU,IACVC,MAAO,IAEN,gBAAGC,EAAH,EAAGA,WAAH,OACC,6BACE,0BAAMC,IAAKD,SAKrB,kBAACR,EAAA,EAAUU,MAAX,eAAyBnB,GACxBI,KAAKgB,gBAAgBlB,IACpB,uBAAGM,UAAU,OACX,2BACI,kBAAC,IAAD,CACAI,MAAO,EACPC,IAAKX,EACLY,SAAU,EACVC,UAAU,IACVC,MAAO,EACPK,WAAW,IAEV,gBAAGJ,EAAH,EAAGA,WAAH,OACC,iCACG,0BAAMC,IAAKD,IADd,gBASZ,kBAACR,EAAA,EAAD,CAAWC,MAAM,QAAQF,UAAU,cACjC,kBAACC,EAAA,EAAUE,MAAX,KACE,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKT,KAAKC,MAAMnD,UAChB4D,SAAU,GACVC,UAAU,IACVC,MAAO,EACPK,WAAW,IAEV,gBAAGJ,EAAH,EAAGA,WAAH,OACC,6BACE,0BAAMC,IAAKD,SAKnB,kBAACR,EAAA,EAAUU,MAAX,kBAA4BpB,GAC3BK,KAAKgB,gBAAgBjB,IACpB,uBAAGK,UAAU,SACX,2BACI,kBAAC,IAAD,CACAI,MAAO,EACPC,IAAKV,EACLW,SAAU,EACVC,UAAU,IACVC,MAAO,EACPK,WAAW,IAEV,gBAAGJ,EAAH,EAAGA,WAAH,OACC,iCACG,0BAAMC,IAAKD,IADd,qB,GA1JMK,aA0KXC,eAFS,SAAC,GAAD,sBAAW,KAIjC,KAFaA,CAGb5B,G,2BC3KI6B,E,4MAEJC,kBAAoB,WACd,EAAKpB,MAAM7B,cAAcf,WAC3B,EAAK4C,MAAM5E,mBAGT,EAAK4E,MAAM7B,cAAcf,WAC3B,EAAK4C,MAAMjE,kB,uDAKb,IAAIsF,EAAa,CAAC,aAAc,aAAc,aAAc,aAAc,cACtEC,EAAY,GAChB,IAAyC,IAArCvB,KAAKC,MAAMhC,YAAYZ,UAAqB,CAC9C,IAAImE,EAAOxB,KAAKC,MAAMhC,YAAYb,cAClCkE,EAAa,GACb,IAAK,IAAI5E,EAAI,EAAGA,EAAI8E,EAAK7E,OAAQD,IAC/B4E,EAAWG,KAAKD,EAAK9E,GAAL,YAChB6E,EAAUE,KAAKD,EAAK9E,GAAL,gBAInB,IAAMb,EAAO,CACX6F,OAAQJ,EACRK,SAAU,CACR,CACEC,MAAO,kBACPC,KAAM,SACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBhH,KAAM0F,KAcZ,OACE,6BACE,kBAACuB,EAAA,EAAD,CAASC,YAAU,GACjB,kBAACC,EAAA,EAAD,CAAQC,GAAG,MACT,kBAACC,EAAA,EAAD,CAAMC,KAAK,UADb,yBAMF,kBAACH,EAAA,EAAD,CAAQC,GAAG,KAAKG,UAAU,UACxB,gDAEGpD,KAAKC,MAAM7B,cAAcT,SACxB,kBAAC,IAAD,CAAQ0F,OAAO,sBAAsBC,WAAS,GAC3CtD,KAAKC,MAAM7B,cAAcT,WAMlC,kBAAC4F,EAAA,EAAD,CAASC,OAAK,GACXxD,KAAKC,MAAM7B,cAAcf,UACxB,kBAACoG,EAAA,EAAD,CAAQ5G,QAAM,EAAC6G,UAAQ,GACrB,kBAACC,EAAA,EAAD,CAAQD,UAAQ,GAAhB,YAEA,8BACJ,kBAAC,EAAD,CACEtD,UAAU,WACV7C,UAAWyC,KAAKC,MAAM7B,cAAcb,UACpCP,UAAWgD,KAAKC,MAAM7B,cAAcZ,MACpCV,UAAWkD,KAAKC,MAAM7B,cAActB,UACpCC,OAAQiD,KAAKC,MAAM7B,cAAcrB,UAIrC,yBAAKqD,UAAU,oBACb,kBAAC,IAAD,CAAMvE,KAAMA,EAAM+H,QA7CR,CACZC,MAAO,CACLC,SAAS,EACTC,KAAM,yCACNC,SAAU,GACVC,UAAW,oB,GAxDW/C,aAuHjBC,gBAhBS,SAAC,GAAD,IAAG9B,EAAH,EAAGA,MAAH,MAAgB,CACtCjB,cAAeiB,EAAMjB,cACrBH,YAAaoB,EAAMpB,gBAGM,SAAA3C,GAAQ,OACjC4I,YACE,CACEzC,SACA0C,WACAnI,iBACAX,oBAEFC,KAGW6F,CAGbC,G,oWCpHa,IACXgD,IAAKC,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAYb,EAAZ,CAAmBa,IAAKA,QACxDwD,MAAOD,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAWb,EAAX,CAAkBa,IAAKA,QACzDyD,MAAOF,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAWb,EAAX,CAAkBa,IAAKA,QACzD0D,OAAQH,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAmBb,EAAnB,CAA0Ba,IAAKA,QAClE2D,YAAaJ,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAkBb,EAAlB,CAAyBa,IAAKA,QACtE4D,KAAML,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAUb,EAAV,CAAiBa,IAAKA,QACvD6D,OAAQN,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAab,EAAb,CAAoBa,IAAKA,QAC5D8D,OAAQP,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAgBb,EAAhB,CAAuBa,IAAKA,QAC/D+D,UAAWR,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAeb,EAAf,CAAsBa,IAAKA,QACjEgE,SAAUT,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAcb,EAAd,CAAqBa,IAAKA,QAC/DiE,SAAUV,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAkBb,EAAlB,CAAyBa,IAAKA,QACnEkE,aAAcX,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAiBb,EAAjB,CAAwBa,IAAKA,QACtEmE,YAAaZ,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAWb,EAAX,CAAkBa,IAAKA,QAC/DoE,OAAQb,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAYb,EAAZ,CAAmBa,IAAKA,QAC3DqE,UAAWd,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAmBb,EAAnB,CAA0Ba,IAAKA,QACrEsE,gBAAiBf,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAYb,EAAZ,CAAmBa,IAAKA,QACpEuE,WAAYhB,sBAAW,SAACpE,EAAOa,GAAR,OAAgB,kBAAC,KAAD,iBAAgBb,EAAhB,CAAuBa,IAAKA,SCvBjEwE,G,4MAEJjE,kBAAoB,YACd,EAAKpB,MAAM5B,aAAahB,gBAAqD8C,IAAxC,EAAKF,MAAM5B,aAAa5B,eAC/D,EAAKwD,MAAMhE,kBACX,EAAKgE,MAAM/D,gBAAgB,KAAM,UACjC,EAAK+D,MAAM3D,sBAAsB,Q,EAIrCiJ,iBAAmB,SAACC,GAClB,MAAO,CACLC,IAAMD,EAAQE,KAAKC,cACnBC,MAAQJ,EAAQE,KAAKC,cACrBE,KAAML,EAAQE,KAAKC,cACnB5B,KAAMyB,EAAQrC,O,EAIlB2C,gBAAkB,SAACC,GACjB,MAAO,CACLC,cAAgBD,EAAOC,cACvBhJ,UAAY+I,EAAO/I,UACnBH,OAASkJ,EAAOlJ,OAChBC,UAAYiJ,EAAOjJ,UACnBC,OAASgJ,EAAOhJ,S,EAIpBkJ,iBAAmB,SAAClI,GAElB,IADA,IAAImI,EAAkB,GACbxJ,EAAI,EAAGA,EAAIqB,EAAWpB,OAAQD,IAAK,CACtCqB,EAAWrB,GAAGsJ,iBAAiBE,GAAoBnI,EAAWrB,GAAGM,UAAYkJ,EAAgBnI,EAAWrB,GAAGsJ,eAAehJ,UAC5HkJ,EAAgBnI,EAAWrB,GAAGsJ,eAAiBjI,EAAWrB,GAC/CqB,EAAWrB,GAAGsJ,iBAAiBE,IAC1CA,EAAgBnI,EAAWrB,GAAGsJ,eAAiBjI,EAAWrB,IAIhC,IADZwJ,EAAgBnI,EAAWrB,GAAGsJ,eAChClJ,YACZoJ,EAAgBnI,EAAWrB,GAAGsJ,eAAelJ,UAAY,WAI7D,OAAOG,OAAOC,OAAOgJ,I,EAIvBC,eAAiB,SAACC,EAAD,GAAiB,IAC5BjK,EAD2B,EAAXyJ,MAEpB,EAAK3F,MAAM/D,gBAAgBC,EAASiK,EAAEC,OAAOC,aAC7C,EAAKrG,MAAM3D,sBAAsBH,I,uDAIjC,IAAImC,EAAY,GACZiI,EAAiB,GACrB,IAAKvG,KAAKC,MAAM5B,aAAahB,gBACa8C,IAAxCH,KAAKC,MAAM5B,aAAa5B,aACuB,IAA/CuD,KAAKC,MAAM5B,aAAa5B,YAAYE,OAAc,CAClD2B,EAAY0B,KAAKC,MAAM5B,aAAa5B,YACpC,IAAK,IAAIC,EAAI,EAAGA,EAAI4B,EAAU3B,OAAQD,SACVyD,IAAtB7B,EAAU5B,GAAGgJ,OACW,OAAtBpH,EAAU5B,GAAGyG,OACf7E,EAAU5B,GAAGyG,KAAO,iBAEtBoD,EAAe9E,KAAKzB,KAAKuF,iBAAiBjH,EAAU5B,MAK1D,IAAI8J,EAAY,GACZC,EAAU,GAEd,IAAKzG,KAAKC,MAAMrD,cAAcS,gBACc8C,IAAxCH,KAAKC,MAAMrD,cAAcmB,YACsB,IAA/CiC,KAAKC,MAAMrD,cAAcmB,WAAWpB,OAAc,CACpD8J,EAAUzG,KAAKC,MAAMrD,cAAcmB,WACnC,IAASrB,EAAI,EAAGA,EAAI+J,EAAQ9J,OAAQD,IAClC8J,EAAU/E,KAAKzB,KAAK8F,gBAAgBW,EAAQ/J,KAK1B,KAFpB8J,EAAYxG,KAAKiG,iBAAiBO,IACV7J,SAGtB6J,EAAY,IAGhB,OACE,6BACE,kBAAC1D,EAAA,EAAD,CAASC,YAAU,GACjB,kBAACC,EAAA,EAAD,CAAQC,GAAG,MACT,kBAACC,EAAA,EAAD,CAAMC,KAAK,UADb,mBAMF,kBAACuD,GAAA,EAAD,CACEtG,UAAU,kBACVwF,MAAO5F,KAAKC,MAAM1B,aAAalC,iBAAmB,KAClDsK,OAAK,EACLC,QAAM,EACNC,WAAS,EACTjD,QAAS2C,EACTO,SAAU9G,KAAKmG,iBAGhBnG,KAAKC,MAAM1B,aAAab,OACvB,kBAACqJ,GAAA,EAAD,CAASC,UAAQ,EAAC5G,UAAU,uBAC1B,kBAAC2G,GAAA,EAAQ/D,OAAT,oDAIJ,kBAACA,EAAA,EAAD,CAAQC,GAAG,KAAKG,UAAU,UAA1B,aAA8CpD,KAAKC,MAAM1B,aAAanC,aACtE,kBAAC4G,EAAA,EAAD,CAAQC,GAAG,KAAKG,UAAU,UACxB,gDAEGpD,KAAKC,MAAM1B,aAAaZ,SACvB,kBAAC,IAAD,CAAQ0F,OAAO,sBAAsBC,WAAS,GAC3CtD,KAAKC,MAAM1B,aAAaZ,WAMjC,kBAAC4F,EAAA,EAAD,CAASC,OAAK,GACXxD,KAAKC,MAAM1B,aAAalB,UACvB,kBAACoG,EAAA,EAAD,CAAQ5G,QAAM,EAAC6G,UAAQ,GACrB,kBAACC,EAAA,EAAD,CAAQD,UAAQ,GAAhB,YAEA,8BACJ,kBAAC,EAAD,CACEtD,UAAU,WACV/C,UAAW2C,KAAKC,MAAM1B,aAAalB,UACnCE,UAAWyC,KAAKC,MAAM1B,aAAahB,UACnCP,UAAWgD,KAAKC,MAAM1B,aAAaf,MACnCV,UAAWkD,KAAKC,MAAM1B,aAAazB,UACnCC,OAAQiD,KAAKC,MAAM1B,aAAaxB,UAIY,IAA/CiD,KAAKC,MAAMrD,cAAcmB,WAAWpB,QACnC,kBAACqG,EAAA,EAAD,CAAQ1C,MAAM,MAAM2C,GAAG,KAAKG,UAAU,UAAtC,8CAEF,yBAAKhD,UAAU,eACb,kBAAC,KAAD,CACE/C,UAAW2C,KAAKC,MAAMrD,cAAcS,UACpCuG,QAAS,CACPqD,SAAU,CACRC,OAAQ,QAEVC,QAAS,QACTC,SAAS,EACTC,SAAU,GAEZC,MAAOC,GACPC,QAAS,CACP,CAAE3D,MAAO,iBAAkB4D,MAAO,iBAClC,CAAE5D,MAAO,cAAe4D,MAAO,aAC/B,CAAE5D,MAAO,SAAU4D,MAAO,UAC1B,CAAE5D,MAAO,YAAa4D,MAAO,aAC7B,CAAE5D,MAAO,SAAU4D,MAAO,WAE5B5L,KAAO2K,EACP3C,MAAO,oBAAsB7D,KAAKC,MAAM1B,aAAanC,oB,GArKvC8E,aA6LXC,gBAhBS,SAAC,GAAD,IAAG9B,EAAH,EAAGA,MAAH,MAAgB,CACtChB,aAAcgB,EAAMhB,aACpBE,aAAcc,EAAMd,aACpB3B,cAAeyC,EAAMzC,kBAGI,SAAAtB,GAAQ,OACjC4I,YACE,CACEjI,kBACAC,kBACAI,yBAEFhB,KAGW6F,CAGbmE,I,UClMIoC,G,4MAEJrG,kBAAoB,YACd,EAAKpB,MAAMzB,WAAWnB,gBAAmD8C,IAAtC,EAAKF,MAAMzB,WAAW/B,aAA0E,IAA7C,EAAKwD,MAAMzB,WAAW/B,YAAYE,SAC1H,EAAKsD,MAAM1D,sB,EAKfgJ,iBAAmB,SAACC,GAKlB,OAJqB,OAAjBA,EAAQE,MAAkC,OAAjBF,EAAQmC,WAAkCxH,IAAjBqF,EAAQE,WAAuCvF,IAAjBqF,EAAQmC,OAC1FnC,EAAQE,KAAO,IAGV,CACLkC,IAAMpC,EAAQE,KAAKC,cACnBH,QAAUA,EAAQ5I,cAClBI,UAAYwI,EAAQxI,UACpBH,OAAS2I,EAAQ3I,OACjBC,UAAY0I,EAAQ1I,UACpBC,OAASyI,EAAQzI,S,uDAMnB,IAAIyJ,EAAY,GACZqB,EAAc,GAClB,IAAK7H,KAAKC,MAAMzB,WAAWnB,gBACe8C,IAAtCH,KAAKC,MAAMzB,WAAW/B,aACuB,IAA7CuD,KAAKC,MAAMzB,WAAW/B,YAAYE,OAAc,CAGlD,IAAIF,EAAcuD,KAAKC,MAAMzB,WAAW/B,YACxCoL,EAAcpL,EAAY,GAAGqL,WAG7B,IAAK,IAAIpL,EAAI,EAAGA,EAAID,EAAYE,OAAQD,IACL,IAA7BD,EAAYC,GAAGI,YACjBL,EAAYC,GAAGI,UAAY,WAED,OAAxBL,EAAYC,GAAGgJ,OACjBjJ,EAAYC,GAAGE,cAAgB,iBAEjC4J,EAAU/E,KAAKzB,KAAKuF,iBAAiB9I,EAAYC,KAGrD,OACE,6BACE,kBAACoG,EAAA,EAAD,CAASC,YAAU,GACjB,kBAACC,EAAA,EAAD,CAAQC,GAAG,MACT,kBAACC,EAAA,EAAD,CAAMC,KAAK,UADb,6BAMF,kBAACH,EAAA,EAAD,CAAQC,GAAG,KAAKG,UAAU,UACxB,gDAEGyE,GACC,kBAAC,IAAD,CAAQxE,OAAO,sBAAsBC,WAAS,GAC3CuE,KAMT,yBAAKzH,UAAU,eACb,kBAAC,KAAD,CACE/C,UAAW2C,KAAKC,MAAMzB,WAAWnB,UACjCuG,QAAS,CACPqD,SAAU,CACRC,OAAQ,QAEVC,QAAS,QACTC,SAAS,EACTC,SAAU,GAEZC,MAAOC,GACPC,QAAS,CACP,CACE3D,MAAO,UAAW4D,MAAO,UAAWM,OAAQ,SAAAC,GAAO,OACnD,2BAAG,kBAACC,GAAA,EAAD,CAAM9E,KAAM6E,EAAQJ,MAAvB,IAAgCI,EAAQxC,WAE1C,CAAE3B,MAAO,cAAe4D,MAAO,YAAaS,YAAa,QACzD,CAAErE,MAAO,SAAU4D,MAAO,UAC1B,CAAE5D,MAAO,YAAa4D,MAAO,aAC7B,CAAE5D,MAAO,SAAU4D,MAAO,WAE5B5L,KAAO2K,EACP3C,MAAO,+B,GA1FW3C,aA8GfC,gBAZS,SAAC,GAAD,MAAgB,CACtC3C,WADsB,EAAGa,MACPb,eAGO,SAAAlD,GAAQ,OACjC4I,YACE,CACE3H,sBAEFjB,KAGW6F,CAGbuG,I,UCjHIS,G,4MAEJjK,MAAQ,CAAEkK,WAAa,U,EAEvBC,gBAAkB,SAACjC,EAAD,GAAkB,IAAZjD,EAAW,EAAXA,KACtB,EAAKmF,SAAS,CAAEF,WAAYjF,IACf,WAATA,EACF,EAAKlD,MAAMwB,KAAK,IAAM0B,GAEtB,EAAKlD,MAAMwB,KAAK,M,uDAIV,IAEA2G,EAAepI,KAAK9B,MAApBkK,WAER,OACE,6BACE,wBAAIhI,UAAU,SAAd,oBACA,kBAACmI,GAAA,EAAD,CAAMnI,UAAU,UAAUoI,WAAS,GACjC,kBAACD,GAAA,EAAKE,KAAN,CACEtF,KAAK,SACLtG,OAAuB,WAAfuL,EACRM,QAAS1I,KAAKqI,gBACdM,GAAG,KAJL,UASA,kBAACJ,GAAA,EAAKE,KAAN,CACEtF,KAAK,UACLtG,OAAuB,YAAfuL,EACRM,QAAS1I,KAAKqI,gBACdM,GAAG,YAJL,cASA,kBAACJ,GAAA,EAAKE,KAAN,CACEtF,KAAK,QACLtG,OAAuB,UAAfuL,EACRM,QAAS1I,KAAKqI,iBAHhB,cASF,8BACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAW1H,KACjC,kBAAC,IAAD,CAAOwH,OAAK,EAACC,KAAK,WAAWC,UAAWxD,KACxC,kBAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,SAASC,UAAWpB,W,GAnD9BxG,aAuEHC,gBAZS,SAAC,GAAD,sBAAW,MAER,SAAA7F,GAAQ,OACjC4I,YACE,CACEzC,SACA0C,YAEF7I,KAIW6F,CAGbgH,ICxEkBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAM9C,GAAS+C,SAASC,cAAc,SAEtCtB,iBACE,kBAAC,IAAD,CAAUuB,MAAOA,GACf,kBAAC,IAAD,CAAiBlO,QAASA,GACxB,kBAAC,GAAD,QAGJiL,IDiHI,kBAAmBkD,WACrBA,UAAUC,cAAcC,MACrB/N,MAAK,SAAAgO,GACJA,EAAaC,gBAEd7N,OAAM,SAAA4B,GACLkM,QAAQlM,MAAMA,EAAMmM,c","file":"static/js/main.90d25220.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\nimport covidReducer from './covid'\n\nexport default (history) => combineReducers({\n  router: connectRouter(history),\n  covid: covidReducer\n})","import axios from 'axios';\n\nexport const GET_GLOBALSUMMARY_REQ = 'GET_GLOBALSUMMARY_REQ'\nexport const GET_GLOBALSUMMARY_SUCCESS  = 'GET_GLOBALSUMMARY_SUCCESS'\nexport const GET_GLOBALSUMMARY_ERROR = 'GET_GLOBALSUMMARY_ERROR'\n\nexport const GET_GLOBALSUMMARY_YESTERDAY_SUCCESS = 'GET_GLOBALSUMMARY_YESTERDAY_SUCCESS'\nexport const GET_GLOBALSUMMARY_YESTERDAY_ERROR = 'GET_GLOBALSUMMARY_YESTERDAY_ERROR'\n\nexport const GET_GLOBALDAILY_REQ = 'GET_GLOBALDAILY_REQ'\nexport const GET_GLOBALDAILY_SUCCESS  = 'GET_GLOBALDAILY_SUCCESS'\nexport const GET_GLOBALDAILY_ERROR = 'GET_GLOBALDAILY_ERROR'\n\nexport const GET_COUNTRIES_REQ = 'GET_COUNTRIES_REQ'\nexport const GET_COUNTRIES_SUCCESS  = 'GET_COUNTRIES_SUCCESS'\nexport const GET_COUNTRIES_ERROR = 'GET_COUNTRIES_ERROR'\n\nexport const GET_COUNTRY_STATS_REQ = 'GET_COUNTRY_STATS_REQ'\nexport const GET_COUNTRY_STATS_SUCCESS  = 'GET_COUNTRY_STATS_SUCCESS'\nexport const GET_COUNTRY_STATS_ERROR = 'GET_COUNTRY_STATS_ERROR'\n\nexport const GET_COUNTRY_YESTERDAY_STATS_SUCCESS = 'GET_COUNTRY_YESTERDAY_STATS_SUCCESS'\nexport const GET_COUNTRY_YESTERDAY_STATS_ERROR = 'GET_COUNTRY_YESTERDAY_STATS_ERROR'\n\nexport const GET_COUNTRYREGION_REQ = 'GET_COUNTRYREGION_REQ'\nexport const GET_COUNTRYREGION_SUCCESS  = 'GET_COUNTRYREGION_SUCCESS'\nexport const GET_COUNTRYREGION_ERROR = 'GET_COUNTRYREGION_ERROR'\n\nexport const GET_ALL_COUNTRY_REQ = 'GET_ALL_COUNTRY_REQ'\nexport const GET_ALL_COUNTRY_SUCCESS  = 'GET_ALL_COUNTRY_SUCCESS'\nexport const GET_ALL_COUNTRY_ERROR = 'GET_ALL_COUNTRY_ERROR'\n\n\n// Get the global summary up to current day (cumalative)\nexport const getGlobalSummary = () => {\n    return dispatch => {\n        dispatch({\n            type: GET_GLOBALSUMMARY_REQ\n        })\n\n        return axios.get('https://disease.sh/v2/all').then(res => {\n            dispatch({\n                type: GET_GLOBALSUMMARY_SUCCESS,\n                payload: res.data\n            })\n            return axios.get('https://disease.sh/v2/all?yesterday=true').then(res => {\n                dispatch({\n                    type: GET_GLOBALSUMMARY_YESTERDAY_SUCCESS,\n                    payload: res.data\n                })\n            }).catch(err => {\n                dispatch({\n                    type: GET_GLOBALSUMMARY_YESTERDAY_ERROR\n                })\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_GLOBALSUMMARY_ERROR\n            })\n        })\n    }\n}\n\n// Get the global daily cases (cumalative)\nexport const getGlobalDaily = () => {\n    return dispatch => {\n        dispatch({\n            type: GET_GLOBALDAILY_REQ\n        })\n\n        return axios.get('https://covid19.mathdro.id/api/daily').then(res => {\n            dispatch({\n                type: GET_GLOBALDAILY_SUCCESS,\n                payload: res.data\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_GLOBALDAILY_ERROR\n            })\n        })\n    }\n}\n\n// Get the iso codes for contries\nexport const getCountryCodes = () => {\n    return dispatch => {\n        dispatch({\n            type: GET_COUNTRIES_REQ\n        })\n\n        return axios.get('https://covid19.mathdro.id/api/countries').then(res => {\n            dispatch({\n                type: GET_COUNTRIES_SUCCESS,\n                payload: res.data\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_COUNTRIES_ERROR\n            })\n        })\n    }\n}\n\n// Get the individual stats for a country\nexport const getCountryStats = (isoCode, countryText) => {\n    return dispatch => {\n        dispatch({\n            type: GET_COUNTRY_STATS_REQ\n        })\n\n        return axios.get('https://disease.sh/v2/countries/' + isoCode).then(res => {\n            dispatch({\n                type: GET_COUNTRY_STATS_SUCCESS,\n                payload: { ...res.data, countryText: countryText, selectedCountry: isoCode }\n            })\n\n            return axios.get('https://disease.sh/v2/countries/' + isoCode + '?yesterday=true').then(res => {\n                dispatch({\n                    type: GET_COUNTRY_YESTERDAY_STATS_SUCCESS,\n                    payload: { ...res.data }\n                })\n            }).catch(err => {\n                dispatch({\n                    type: GET_COUNTRY_YESTERDAY_STATS_ERROR,\n                })\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_COUNTRY_STATS_ERROR,\n                payload: { countryText: countryText, selectedCountry: isoCode }\n            })\n        })\n\n    }\n}\n\n\n// Get the region stats for a country (if any)\nexport const getCountryRegionStats = (isoCode) => {\n    return dispatch => {\n        dispatch({\n            type: GET_COUNTRYREGION_REQ\n        })\n\n        return axios.get('https://covid19.mathdro.id/api/countries/' + isoCode + '/confirmed').then(res => {\n            dispatch({\n                type: GET_COUNTRYREGION_SUCCESS,\n                payload: res.data\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_COUNTRYREGION_ERROR\n            })\n        })\n    }\n}\n\n// Get the stats for each country\nexport const getAllCountryStats = () => {\n    return dispatch => {\n        dispatch({\n            type: GET_ALL_COUNTRY_REQ\n        })\n\n        return axios.get('https://covid19.mathdro.id/api/confirmed/').then(res => {\n            let compiledCountries = {}\n            let countryList = res.data\n\n            // compile the regions into countries, i.e New York should add onto US count\n            for (var i = 0; i < countryList.length; i++) {\n              if (countryList[i].countryRegion in compiledCountries) {\n                // found existing bucket, add stats onto it\n                \n                compiledCountries[countryList[i].countryRegion].active    += countryList[i].active\n                compiledCountries[countryList[i].countryRegion].recovered += countryList[i].recovered\n                compiledCountries[countryList[i].countryRegion].deaths    += countryList[i].active\n                compiledCountries[countryList[i].countryRegion].confirmed += countryList[i].confirmed\n        \n              } else {\n                // country not found, so add it to dict\n                compiledCountries[countryList[i].countryRegion] = countryList[i]\n              }\n            }\n\n            let data = Object.values(compiledCountries)\n\n            dispatch({\n                type: GET_ALL_COUNTRY_SUCCESS,\n                payload: data\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_ALL_COUNTRY_ERROR\n            })\n        })\n    }\n}","import { combineReducers } from \"redux\"\nimport { \n    GET_GLOBALDAILY_ERROR,\n    GET_GLOBALDAILY_SUCCESS,\n    GET_GLOBALDAILY_REQ,\n    GET_GLOBALSUMMARY_ERROR,\n    GET_GLOBALSUMMARY_REQ,\n    GET_GLOBALSUMMARY_SUCCESS,\n    GET_GLOBALSUMMARY_YESTERDAY_ERROR,\n    GET_GLOBALSUMMARY_YESTERDAY_SUCCESS,\n    GET_COUNTRIES_ERROR,\n    GET_COUNTRIES_REQ,\n    GET_COUNTRIES_SUCCESS,\n    GET_COUNTRY_STATS_ERROR,\n    GET_COUNTRY_STATS_REQ,\n    GET_COUNTRY_STATS_SUCCESS,\n    GET_COUNTRY_YESTERDAY_STATS_ERROR,\n    GET_COUNTRY_YESTERDAY_STATS_SUCCESS,\n    GET_COUNTRYREGION_ERROR,\n    GET_COUNTRYREGION_REQ,\n    GET_COUNTRYREGION_SUCCESS,\n    GET_ALL_COUNTRY_ERROR,\n    GET_ALL_COUNTRY_REQ,\n    GET_ALL_COUNTRY_SUCCESS\n} from '../actions/covid'\n\nconst initialStateGlobalDaily = {\n    confirmedList: [],\n    isLoading: true\n}\n\nconst initialStateStats = {\n    yesterday: {\n        cases: 0,\n        recovered: 0,\n        deaths: 0,\n        critical: 0,\n        isLoading: true,\n    },\n    cases: 0,\n    recovered: 0,\n    deaths: 0,\n    critical: 0,\n    isLoading: true,\n    error: '',\n    countryText: '',\n    selectedCountry: '',\n    updated: '',\n}\n\n\nconst initialStateCountryCodes = {\n    countryList: [],\n    isLoading: true\n}\n\nconst initialStateAllCountry = {\n    countryList: [],\n    isLoading: true\n}\n\nconst initialStateCountryRegion = {\n    regionList: [],\n    isLoading: true\n}\n\nconst globalSummaryReducer = (state = initialStateStats, action) => {\n    switch (action.type) {\n        case GET_GLOBALSUMMARY_REQ:\n            return {\n                ...state,\n                isLoading: true,\n            }\n        case GET_GLOBALSUMMARY_SUCCESS:\n            return {\n                ...action.payload,\n                isLoading: false\n            }\n        case GET_GLOBALSUMMARY_YESTERDAY_SUCCESS:\n            return {\n                ...state,\n                yesterday : { isLoading: false, ...action.payload },\n            }\n        case GET_GLOBALSUMMARY_YESTERDAY_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n                error: ''\n            }\n        case GET_GLOBALSUMMARY_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n            }\n        default:\n            return state\n    }\n}\n\nconst globalDailyReducer = (state = initialStateGlobalDaily, action) => {\n    switch (action.type) {\n        case GET_GLOBALDAILY_REQ:\n            return {\n                ...state,\n                isLoading: true,\n            }\n        case GET_GLOBALDAILY_SUCCESS:\n            return {\n                confirmedList: action.payload,\n                isLoading: false\n            }\n        case GET_GLOBALDAILY_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n            }\n        default:\n            return state\n    }\n}\n\nconst countryCodesReducer = (state = initialStateCountryCodes, action) => {\n    switch (action.type) {\n        case GET_COUNTRIES_REQ:\n            return {\n                ...state,\n                isLoading: true,\n            }\n        case GET_COUNTRIES_SUCCESS:\n            return {\n                countryList: action.payload.countries,\n                isLoading: false\n            }\n        case GET_COUNTRIES_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n            }\n        default:\n            return state\n    }\n}\n\nconst countryStatsReducer = (state = initialStateStats, action) => {\n    switch (action.type) {\n        case GET_COUNTRY_STATS_REQ:\n            return {\n                ...state,\n                ...initialStateStats,\n                isLoading: true,\n                error: ''\n            }\n        case GET_COUNTRY_STATS_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n                isLoading: false,\n                error: ''\n            }\n        case GET_COUNTRY_YESTERDAY_STATS_SUCCESS:\n            return {\n                ...state,\n                yesterday : { isLoading: false, ...action.payload },\n            }\n        case GET_COUNTRY_STATS_ERROR:\n            return {\n                ...initialStateStats,\n                ...action.payload,\n                isLoading: false,\n                selectedCountry: action.payload.selectedCountry,\n                error: 'Could not find stats for selected country.'\n            }\n        case GET_COUNTRY_YESTERDAY_STATS_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n                error: ''\n            }\n        default:\n            return state\n    }\n}\n\n\nconst countryRegionStatsReducer = (state = initialStateCountryRegion, action) => {\n    switch (action.type) {\n        case GET_COUNTRYREGION_REQ:\n            return {\n                ...state,\n                isLoading: true,\n                error: ''\n            }\n        case GET_COUNTRYREGION_SUCCESS:\n            return {\n                regionList : action.payload,\n                isLoading: false,\n                error: ''\n            }\n        case GET_COUNTRYREGION_ERROR:\n            return {\n                ...initialStateCountryRegion,\n                isLoading: false,\n                error: ''\n            }\n        default:\n            return state\n    }\n}\n\nconst allCountryReducer = (state = initialStateAllCountry, action) => {\n    switch (action.type) {\n        case GET_ALL_COUNTRY_REQ:\n            return {\n                ...state,\n                isLoading: true,\n                error: ''\n            }\n        case GET_ALL_COUNTRY_SUCCESS:\n            return {\n                countryList : action.payload,\n                isLoading: false,\n                error: ''\n            }\n        case GET_ALL_COUNTRY_ERROR:\n            return {\n                ...initialStateAllCountry,\n                isLoading: false,\n                error: ''\n            }\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({ \n    globalDaily: globalDailyReducer,\n    globalSummary: globalSummaryReducer,\n    countryCodes: countryCodesReducer,\n    countryStats: countryStatsReducer,\n    countryRegion: countryRegionStatsReducer,\n    allCountry: allCountryReducer\n})","import { createStore, applyMiddleware, compose } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport createRootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { createBrowserHistory } from 'history'\n\nexport const history = createBrowserHistory(\n  {\n    basename: process.env.PUBLIC_URL\n  }\n)\n\nconst initialState = {}\nconst enhancers = []\nconst middleware = [thunk, routerMiddleware(history)]\n\nif (process.env.NODE_ENV === 'development') {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension())\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n)\n\nexport default createStore(\n  createRootReducer(history),\n  initialState,\n  composedEnhancers\n)\n","import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Statistic, Label, Header,\r\n         Icon, Grid }\r\nfrom 'semantic-ui-react'\r\nimport CountUp from 'react-countup';\r\n\r\n\r\nclass GlobalCards extends Component {\r\n\r\n  numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  shouldLoadLabel(cases) {\r\n    if (cases !== 0) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  render() {\r\n\r\n    let recoverPercentage = \"\"\r\n    let deathPercentage = \"\"\r\n    let yesterdayCases = 0\r\n    let yesterdayDeaths = 0\r\n    let yesterdayRecovered = 0\r\n\r\n    if (this.props.recovered !== 0) {\r\n      recoverPercentage = ((this.props.recovered / this.props.confirmed)*100).toFixed(1)\r\n      deathPercentage = ((this.props.deaths / this.props.confirmed)*100).toFixed(1)\r\n      recoverPercentage = \"(\" + recoverPercentage + \"%)\"\r\n      deathPercentage = \"(\" + deathPercentage + \"%)\"\r\n\r\n      if (this.props.yesterday !== undefined && !this.props.yesterday.isLoading && !this.props.isLoading) {\r\n        if (this.props.yesterday.cases !== 0) {\r\n          yesterdayCases = this.props.confirmed - this.props.yesterday.cases\r\n        }\r\n  \r\n        if (this.props.yesterday.deaths !== 0) {\r\n          yesterdayDeaths = this.props.deaths - this.props.yesterday.deaths\r\n        }\r\n  \r\n        if (this.props.yesterday.recovered !== 0) {\r\n          yesterdayRecovered = this.props.recovered - this.props.yesterday.recovered\r\n        }\r\n      }\r\n      \r\n    }\r\n\r\n    \r\n   \r\n    return (\r\n      <div className={this.props.className}>\r\n        \r\n        <Statistic color='blue' className='statSubBox'>\r\n          <Statistic.Value>\r\n            <CountUp\r\n              start={0}\r\n              end={this.props.confirmed}\r\n              duration={1}\r\n              separator=','\r\n              delay={0}\r\n            >\r\n              {({ countUpRef }) => (\r\n                <div>\r\n                  <span ref={countUpRef} />\r\n                </div>\r\n              )}\r\n            </CountUp>\r\n          </Statistic.Value>\r\n          <Statistic.Label>Confirmed Cases</Statistic.Label>\r\n          {this.shouldLoadLabel(yesterdayCases) &&\r\n            <p className='blue'>\r\n              <b>\r\n                  <CountUp\r\n                  start={0}\r\n                  end={yesterdayCases}\r\n                  duration={1}\r\n                  separator=','\r\n                  delay={0}\r\n                  useEasing={true}\r\n                >\r\n                  {({ countUpRef }) => (\r\n                    <div>\r\n                      +<span ref={countUpRef}/> Today\r\n                    </div>\r\n                  )}\r\n                </CountUp>\r\n              </b>\r\n            </p>\r\n          }\r\n        </Statistic>\r\n        <Statistic color='red' className='statSubBox'>\r\n          <Statistic.Value>\r\n            <CountUp\r\n                start={0}\r\n                end={this.props.deaths}\r\n                duration={1}\r\n                separator=','\r\n                delay={0}\r\n              >\r\n                {({ countUpRef }) => (\r\n                  <div>\r\n                    <span ref={countUpRef}/>\r\n                  </div>\r\n                )}\r\n              </CountUp>\r\n          </Statistic.Value>\r\n          <Statistic.Label>Deaths {deathPercentage}</Statistic.Label>\r\n          {this.shouldLoadLabel(yesterdayDeaths) &&\r\n            <p className='red'>\r\n              <b>\r\n                  <CountUp\r\n                  start={0}\r\n                  end={yesterdayDeaths}\r\n                  duration={1}\r\n                  separator=','\r\n                  delay={0}\r\n                  useEasing={true}\r\n                >\r\n                  {({ countUpRef }) => (\r\n                    <div>\r\n                      +<span ref={countUpRef}/> Today\r\n                    </div>\r\n                  )}\r\n                </CountUp>\r\n              </b>\r\n            </p>\r\n          }\r\n        </Statistic>\r\n        <Statistic color='green' className='statSubBox'>\r\n          <Statistic.Value>\r\n            <CountUp\r\n              start={0}\r\n              end={this.props.recovered}\r\n              duration={0.7}\r\n              separator=','\r\n              delay={0}\r\n              useEasing={true}\r\n            >\r\n              {({ countUpRef }) => (\r\n                <div>\r\n                  <span ref={countUpRef} />\r\n                </div>\r\n              )}\r\n            </CountUp>\r\n          </Statistic.Value>\r\n          <Statistic.Label>Recovered {recoverPercentage}</Statistic.Label>\r\n          {this.shouldLoadLabel(yesterdayRecovered) &&\r\n            <p className='green'>\r\n              <b>\r\n                  <CountUp\r\n                  start={0}\r\n                  end={yesterdayRecovered}\r\n                  duration={1}\r\n                  separator=','\r\n                  delay={0}\r\n                  useEasing={true}\r\n                >\r\n                  {({ countUpRef }) => (\r\n                    <div>\r\n                      +<span ref={countUpRef}/> Today\r\n                    </div>\r\n                  )}\r\n                </CountUp>\r\n              </b>\r\n            </p>\r\n          }\r\n        </Statistic>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({  }) => ({})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(GlobalCards)\r\n","import React, {Component, Button} from 'react';\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { push, goBack } from 'connected-react-router'\nimport { getGlobalDaily, getGlobalSummary } from '../../actions/covid'\nimport { Divider, Header, Icon,\n         Dimmer, Loader, Segment } from 'semantic-ui-react'\nimport GlobalCards from '../../components/GlobalCards'\nimport { Line } from 'react-chartjs-2';\nimport Moment from 'react-moment';\n\n\nclass GlobalSummaryPage extends Component {\n\n  componentDidMount = () => {\n    if (this.props.globalSummary.isLoading) {\n      this.props.getGlobalSummary()\n    }\n\n    if (this.props.globalSummary.isLoading) {\n      this.props.getGlobalDaily()\n    }\n  }\n\n  render() {\n    let dateLabels = ['2020-04-01', '2020-04-02', '2020-04-03', '2020-04-04', '2020-04-05']\n    let casesData = []\n    if (this.props.globalDaily.isLoading === false) {\n      var list = this.props.globalDaily.confirmedList\n      dateLabels = []\n      for (var i = 0; i < list.length; i++) {\n        dateLabels.push(list[i]['reportDate'])\n        casesData.push(list[i]['totalConfirmed'])\n      }\n    }\n\n    const data = {\n      labels: dateLabels,\n      datasets: [\n        {\n          label: 'Confirmed Cases',\n          fill: 'origin',\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 30,\n          data: casesData\n        }\n      ]\n    }\n\n    const options = {\n        title: {\n          display: true,\n          text: 'Number of Confirmed Cases since Jan 22',\n          fontSize: 20,\n          fontColor: '#000000'\n      }\n    }\n\n    return (\n      <div>\n        <Divider horizontal>\n          <Header as='h4'>\n            <Icon name='globe' />\n            Global Cases Summary\n          </Header>\n        </Divider>\n\n        <Header as='h5' textAlign='center'>\n          <p>\n            Last updated: &nbsp;\n            {this.props.globalSummary.updated && (\n              <Moment format=\"MMM D YYYY hh:mm:ss\" withTitle>\n                {this.props.globalSummary.updated}\n              </Moment>\n            )}\n          </p>\n        </Header>\n\n        <Segment basic>\n          {this.props.globalSummary.isLoading ? (\n            <Dimmer active inverted >\n              <Loader inverted>Loading</Loader>\n            </Dimmer>\n          ) : <div/>}\n          <GlobalCards \n            className='statsBox'\n            yesterday={this.props.globalSummary.yesterday}\n            confirmed={this.props.globalSummary.cases}\n            recovered={this.props.globalSummary.recovered}\n            deaths={this.props.globalSummary.deaths}\n          />\n        </Segment>\n\n        <div className=\"globalCasesChart\">\n          <Line data={data} options={options} />\n        </div>\n      </div>\n    )\n  }\n}\n  \nconst mapStateToProps = ({ covid }) => ({\n  globalSummary: covid.globalSummary,\n  globalDaily: covid.globalDaily\n})\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      push,\n      goBack,\n      getGlobalDaily,\n      getGlobalSummary\n    },\n    dispatch\n  )\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GlobalSummaryPage)\n","import React from 'react';\r\nimport { forwardRef } from 'react';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nexport default {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};","import React, {Component, Button} from 'react';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { getCountryCodes, getCountryStats, getCountryRegionStats } from '../../actions/covid'\r\nimport { Divider, Header, Icon, Dropdown,\r\n         Dimmer, Loader, Segment, Message } from 'semantic-ui-react'\r\nimport GlobalCards from '../../components/GlobalCards'\r\nimport Moment from 'react-moment';\r\nimport MaterialTable from \"material-table\";\r\nimport TableIcons from '../../components/TableIcons'\r\n\r\n\r\nclass CountryPage extends Component {\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.countryCodes.isLoading || this.props.countryCodes.countryList === undefined) {\r\n      this.props.getCountryCodes()\r\n      this.props.getCountryStats('ca', 'Canada') // default value is Canada 'ca'\r\n      this.props.getCountryRegionStats('ca')\r\n    }\r\n  }\r\n\r\n  getCountryObject = (country) => {\r\n    return {\r\n      key : country.iso2.toLowerCase(),\r\n      value : country.iso2.toLowerCase(),\r\n      flag: country.iso2.toLowerCase(),\r\n      text: country.name\r\n    }\r\n  }\r\n\r\n  getRegionObject = (region) => {\r\n    return {\r\n      provinceState : region.provinceState,\r\n      confirmed : region.confirmed,\r\n      active : region.active,\r\n      recovered : region.recovered,\r\n      deaths : region.deaths\r\n    }\r\n  }\r\n\r\n  getFilterRegions = (regionList) => {\r\n    var filteredRegions = {}\r\n    for (var i = 0; i < regionList.length; i++) {\r\n      if (regionList[i].provinceState in filteredRegions && (regionList[i].confirmed > filteredRegions[regionList[i].provinceState].confirmed)) {\r\n        filteredRegions[regionList[i].provinceState] = regionList[i]\r\n      } else if (!(regionList[i].provinceState in filteredRegions)) {\r\n        filteredRegions[regionList[i].provinceState] = regionList[i]\r\n      }\r\n\r\n      var regionObj = filteredRegions[regionList[i].provinceState]\r\n      if (regionObj.recovered === 0) {\r\n        filteredRegions[regionList[i].provinceState].recovered = 'No data'\r\n      }\r\n\r\n    }\r\n    return Object.values(filteredRegions)\r\n  }\r\n\r\n\r\n  handleDropdown = (e, {value}) => {\r\n    var isoCode = value\r\n    this.props.getCountryStats(isoCode, e.target.textContent)\r\n    this.props.getCountryRegionStats(isoCode)\r\n  }\r\n\r\n  render() {\r\n    var countries = []\r\n    var countryOptions = []\r\n    if (!this.props.countryCodes.isLoading &&\r\n      this.props.countryCodes.countryList !== undefined &&\r\n      this.props.countryCodes.countryList.length !== 0) {\r\n      countries = this.props.countryCodes.countryList\r\n      for (var i = 0; i < countries.length; i++) {\r\n        if (countries[i].iso2 !== undefined) {\r\n          if (countries[i].name === 'US') {\r\n            countries[i].name = 'United States'\r\n          }\r\n          countryOptions.push(this.getCountryObject(countries[i]))\r\n        }\r\n      }\r\n    }\r\n\r\n    var tableData = []\r\n    var regions = []\r\n    var tableLength = 0\r\n    if (!this.props.countryRegion.isLoading &&\r\n        this.props.countryRegion.regionList !== undefined &&\r\n        this.props.countryRegion.regionList.length !== 0) {\r\n      regions = this.props.countryRegion.regionList\r\n      for (var i = 0; i < regions.length; i++) {\r\n        tableData.push(this.getRegionObject(regions[i]))\r\n      }\r\n      \r\n      tableData = this.getFilterRegions(tableData)\r\n      tableLength = tableData.length\r\n      if (tableLength === 1) {\r\n        // No region stats available\r\n        tableData = []\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Divider horizontal>\r\n          <Header as='h4'>\r\n            <Icon name='globe' />\r\n            Country Filter\r\n          </Header>\r\n        </Divider>\r\n\r\n        <Dropdown\r\n          className='countryDropdown'\r\n          value={this.props.countryStats.selectedCountry || 'ca'}\r\n          fluid\r\n          search\r\n          selection\r\n          options={countryOptions}\r\n          onChange={this.handleDropdown}\r\n        />\r\n\r\n        {this.props.countryStats.error && (\r\n          <Message negative className='errorMessageCountry'>\r\n            <Message.Header>Could not find stats for selected country.</Message.Header>\r\n          </Message>\r\n        )}\r\n\r\n        <Header as='h1' textAlign='center'>Stats for {this.props.countryStats.countryText}</Header>\r\n        <Header as='h5' textAlign='center'>\r\n          <p>\r\n            Last updated: &nbsp;\r\n            {this.props.countryStats.updated && (\r\n              <Moment format=\"MMM D YYYY hh:mm:ss\" withTitle>\r\n                {this.props.countryStats.updated}\r\n              </Moment>\r\n            )}\r\n          </p>\r\n        </Header>\r\n\r\n        <Segment basic>\r\n          {this.props.countryStats.isLoading ? (\r\n            <Dimmer active inverted>\r\n              <Loader inverted>Loading</Loader>\r\n            </Dimmer>\r\n          ) : <div/>}\r\n          <GlobalCards \r\n            className='statsBox'\r\n            isLoading={this.props.countryStats.isLoading}\r\n            yesterday={this.props.countryStats.yesterday}\r\n            confirmed={this.props.countryStats.cases}\r\n            recovered={this.props.countryStats.recovered}\r\n            deaths={this.props.countryStats.deaths}\r\n          />\r\n        </Segment>\r\n\r\n        {this.props.countryRegion.regionList.length === 1 && (\r\n          <Header color='red' as='h5' textAlign='center'>No region stats available for this country</Header>\r\n        )}\r\n        <div className='regionTable'>\r\n          <MaterialTable\r\n            isLoading={this.props.countryRegion.isLoading}\r\n            options={{\r\n              rowStyle: {\r\n                height: '50px'\r\n              },\r\n              padding: 'dense',\r\n              sorting: true,\r\n              pageSize: 7,\r\n            }}\r\n            icons={TableIcons}\r\n            columns={[\r\n              { title: \"Province/State\", field: \"provinceState\" },\r\n              { title: \"Total Cases\", field: \"confirmed\" },\r\n              { title: \"Active\", field: \"active\" },\r\n              { title: \"Recovered\", field: \"recovered\" },\r\n              { title: \"Deaths\", field: \"deaths\" }\r\n            ]}\r\n            data={ tableData }\r\n            title={\"Region Stats for \" + this.props.countryStats.countryText}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n  \r\nconst mapStateToProps = ({ covid }) => ({\r\n  countryCodes: covid.countryCodes,\r\n  countryStats: covid.countryStats,\r\n  countryRegion: covid.countryRegion\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      getCountryCodes,\r\n      getCountryStats,\r\n      getCountryRegionStats\r\n    },\r\n    dispatch\r\n  )\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CountryPage)\r\n","import React, {Component, Button} from 'react';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { getAllCountryStats } from '../../actions/covid'\r\nimport { Divider, Header, Icon, Flag } from 'semantic-ui-react'\r\nimport Moment from 'react-moment';\r\nimport MaterialTable from \"material-table\";\r\nimport TableIcons from '../../components/TableIcons'\r\n\r\n\r\nclass GlobalTablePage extends Component {\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.allCountry.isLoading || this.props.allCountry.countryList === undefined || this.props.allCountry.countryList.length === 0) {\r\n      this.props.getAllCountryStats()\r\n    }\r\n  }\r\n\r\n\r\n  getCountryObject = (country) => {\r\n    if (country.iso2 === null || country.iso3 === null || country.iso2 === undefined || country.iso3 === undefined) {\r\n      country.iso2 = ''\r\n    }\r\n\r\n    return {\r\n      iso : country.iso2.toLowerCase(),\r\n      country : country.countryRegion,\r\n      confirmed : country.confirmed,\r\n      active : country.active,\r\n      recovered : country.recovered,\r\n      deaths : country.deaths\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    var tableData = []\r\n    var lastUpdated = ''\r\n    if (!this.props.allCountry.isLoading &&\r\n        this.props.allCountry.countryList !== undefined &&\r\n        this.props.allCountry.countryList.length !== 0) {\r\n\r\n\r\n      var countryList = this.props.allCountry.countryList\r\n      lastUpdated = countryList[0].lastUpdate\r\n\r\n      // clean the data\r\n      for (var i = 0; i < countryList.length; i++) {\r\n        if (countryList[i].recovered === 0) {\r\n          countryList[i].recovered = 'No data'\r\n        }\r\n        if (countryList[i].iso2 === 'US') {\r\n          countryList[i].countryRegion = 'United States'\r\n        }\r\n        tableData.push(this.getCountryObject(countryList[i]))\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Divider horizontal>\r\n          <Header as='h4'>\r\n            <Icon name='globe' />\r\n            Global Cases per Country\r\n          </Header>\r\n        </Divider>\r\n\r\n        <Header as='h5' textAlign='center'>\r\n          <p>\r\n            Last updated: &nbsp;\r\n            {lastUpdated && (\r\n              <Moment format=\"MMM D YYYY hh:mm:ss\" withTitle>\r\n                {lastUpdated}\r\n              </Moment>\r\n            )}\r\n          </p>\r\n        </Header>\r\n\r\n        <div className='globalTable'>\r\n          <MaterialTable\r\n            isLoading={this.props.allCountry.isLoading}\r\n            options={{\r\n              rowStyle: {\r\n                height: '50px'\r\n              },\r\n              padding: 'dense',\r\n              sorting: true,\r\n              pageSize: 7,\r\n            }}\r\n            icons={TableIcons}\r\n            columns={[\r\n              { \r\n                title: \"Country\", field: \"country\", render: rowData => \r\n                <p><Flag name={rowData.iso} /> {rowData.country}</p>\r\n              },\r\n              { title: \"Total Cases\", field: \"confirmed\", defaultSort: \"desc\" },\r\n              { title: \"Active\", field: \"active\" },\r\n              { title: \"Recovered\", field: \"recovered\" },\r\n              { title: \"Deaths\", field: \"deaths\" }\r\n            ]}\r\n            data={ tableData }\r\n            title={\"Global Country Stats\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n  \r\nconst mapStateToProps = ({ covid }) => ({\r\n  allCountry: covid.allCountry\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      getAllCountryStats\r\n    },\r\n    dispatch\r\n  )\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GlobalTablePage)\r\n","import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { Route } from 'react-router'\r\nimport GlobalSummaryPage from '../GlobalSummaryPage'\r\nimport CountryPage from '../CountryPage'\r\nimport GlobalTablePage from '../GlobalTablePage'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport { push, goBack } from 'connected-react-router'\r\n\r\nclass App extends Component {\r\n\r\n  state = { activeItem : \"global\"}\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    this.setState({ activeItem: name })\r\n    if (name !== \"global\") {\r\n      this.props.push('/' + name)\r\n    } else {\r\n      this.props.push('/')\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    const { activeItem } = this.state\r\n\r\n    return (\r\n      <div>\r\n        <h1 className=\"title\">COVID-19 Tracker</h1>\r\n        <Menu className='menuBar' secondary>\r\n          <Menu.Item\r\n            name='global'\r\n            active={activeItem === 'global'}\r\n            onClick={this.handleItemClick}\r\n            to=\"/\"\r\n          >\r\n            Global\r\n          </Menu.Item>\r\n\r\n          <Menu.Item\r\n            name='country'\r\n            active={activeItem === 'country'}\r\n            onClick={this.handleItemClick}\r\n            to='/country'\r\n          >\r\n            By Country\r\n          </Menu.Item>\r\n\r\n          <Menu.Item\r\n            name='stats'\r\n            active={activeItem === 'stats'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            All Stats\r\n          </Menu.Item>\r\n        </Menu>\r\n\r\n        <main>\r\n          <Route exact path=\"/\" component={GlobalSummaryPage} />\r\n          <Route exact path=\"/country\" component={CountryPage} />\r\n          <Route exact path=\"/stats\" component={GlobalTablePage} />\r\n        </main>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({  }) => ({})\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      push,\r\n      goBack\r\n    },\r\n    dispatch\r\n  ) \r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store, { history } from './store'\nimport { ConnectedRouter } from 'connected-react-router'\nimport './index.css';\nimport App from './containers/app/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst target = document.querySelector('#root')\n\nrender(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App/>\n    </ConnectedRouter>\n  </Provider>,\n  target\n)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}