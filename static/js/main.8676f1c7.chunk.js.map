{"version":3,"sources":["reducers/index.js","actions/covid.js","reducers/covid.js","actions/global.js","reducers/global.js","store.js","components/GlobalCards/index.js","containers/GlobalSummaryPage/index.js","components/TableIcons/index.js","containers/CountryPage/index.js","components/CountryCard/index.js","containers/GlobalTablePage/index.js","containers/app/App.js","serviceWorker.js","index.js"],"names":["history","getGlobalSummary","dispatch","type","axios","get","then","res","payload","data","catch","err","getGlobalDaily","dates","Object","keys","cases","values","recovered","deaths","getCountryCodes","getCountryStats","isoCode","countryText","selectedCountry","getCountryRegionStats","getAllCountryStats","getCountryHistory","timeline","initialStateGlobalDaily","isLoading","initialStateCountryHistory","initialStateStats","yesterday","critical","error","updated","initialStateCountryCodes","countryList","initialStateAllCountry","initialStateCountryRegion","regionList","combineReducers","globalDaily","state","action","globalSummary","countryCodes","countries","countryStats","countryRegion","allCountry","countryHistory","updateNavbar","item","updateTablePage","updateCountryNavOption","initialStateNavbar","selected","initialStateTablePage","initialStateCountryNav","navbar","tablePage","countryNav","createBrowserHistory","basename","process","middleware","thunk","routerMiddleware","composedEnhancers","compose","applyMiddleware","createStore","router","connectRouter","covid","covidReducer","global","globalReducer","GlobalCards","recoverPercentage","deathPercentage","yesterdayCases","yesterdayDeaths","yesterdayRecovered","this","props","confirmed","toFixed","undefined","className","Paper","Statistic","color","Value","start","end","duration","separator","delay","countUpRef","ref","Label","shouldLoadLabel","useEasing","Component","connect","GlobalSummaryPage","componentDidMount","dateLabels","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","pointHoverBackgroundColor","pointHoverBorderColor","options","title","display","text","fontSize","fontColor","responsive","animation","easing","tooltips","mode","Divider","horizontal","Header","as","Icon","name","textAlign","fromNow","Segment","basic","Dimmer","active","inverted","Loader","bindActionCreators","push","goBack","Add","forwardRef","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","CountryPage","length","getCountryObject","country","key","iso2","toLowerCase","value","flag","getRegionObject","region","provinceState","getFilterRegions","filteredRegions","i","handleDropdown","e","target","textContent","handleItemClick","countryOptions","tableData","regions","Dropdown","fluid","search","selection","onChange","Message","negative","Menu","secondary","Item","onClick","rowStyle","height","padding","sorting","pageSize","icons","TableIcons","columns","field","CountryCard","x","toString","replace","Card","variant","CardContent","Typography","component","Image","src","size","inline","numberWithCommas","GlobalTablePage","countryInfo","iso","lastUpdated","sort","a","b","render","rowData","Flag","defaultSort","map","App","pathname","slice","to","exact","path","location","Boolean","window","hostname","match","document","querySelector","store","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8676f1c7.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\nimport covidReducer from './covid'\nimport globalReducer from './global'\n\nexport default (history) => combineReducers({\n  router: connectRouter(history),\n  covid: covidReducer,\n  global: globalReducer\n})","import axios from 'axios';\n\nexport const GET_GLOBALSUMMARY_REQ = 'GET_GLOBALSUMMARY_REQ'\nexport const GET_GLOBALSUMMARY_SUCCESS  = 'GET_GLOBALSUMMARY_SUCCESS'\nexport const GET_GLOBALSUMMARY_ERROR = 'GET_GLOBALSUMMARY_ERROR'\n\nexport const GET_GLOBALSUMMARY_YESTERDAY_SUCCESS = 'GET_GLOBALSUMMARY_YESTERDAY_SUCCESS'\nexport const GET_GLOBALSUMMARY_YESTERDAY_ERROR = 'GET_GLOBALSUMMARY_YESTERDAY_ERROR'\n\nexport const GET_GLOBALDAILY_REQ = 'GET_GLOBALDAILY_REQ'\nexport const GET_GLOBALDAILY_SUCCESS  = 'GET_GLOBALDAILY_SUCCESS'\nexport const GET_GLOBALDAILY_ERROR = 'GET_GLOBALDAILY_ERROR'\n\nexport const GET_COUNTRIES_REQ = 'GET_COUNTRIES_REQ'\nexport const GET_COUNTRIES_SUCCESS  = 'GET_COUNTRIES_SUCCESS'\nexport const GET_COUNTRIES_ERROR = 'GET_COUNTRIES_ERROR'\n\nexport const GET_COUNTRY_STATS_REQ = 'GET_COUNTRY_STATS_REQ'\nexport const GET_COUNTRY_STATS_SUCCESS  = 'GET_COUNTRY_STATS_SUCCESS'\nexport const GET_COUNTRY_STATS_ERROR = 'GET_COUNTRY_STATS_ERROR'\n\nexport const GET_COUNTRY_YESTERDAY_STATS_SUCCESS = 'GET_COUNTRY_YESTERDAY_STATS_SUCCESS'\nexport const GET_COUNTRY_YESTERDAY_STATS_ERROR = 'GET_COUNTRY_YESTERDAY_STATS_ERROR'\n\nexport const GET_COUNTRYREGION_REQ = 'GET_COUNTRYREGION_REQ'\nexport const GET_COUNTRYREGION_SUCCESS  = 'GET_COUNTRYREGION_SUCCESS'\nexport const GET_COUNTRYREGION_ERROR = 'GET_COUNTRYREGION_ERROR'\n\nexport const GET_ALL_COUNTRY_REQ = 'GET_ALL_COUNTRY_REQ'\nexport const GET_ALL_COUNTRY_SUCCESS  = 'GET_ALL_COUNTRY_SUCCESS'\nexport const GET_ALL_COUNTRY_ERROR = 'GET_ALL_COUNTRY_ERROR'\n\nexport const GET_HIST_COUNTRY_REQ = 'GET_HIST_COUNTRY_REQ'\nexport const GET_HIST_COUNTRY_SUCCESS  = 'GET_HIST_COUNTRY_SUCCESS'\nexport const GET_HIST_COUNTRY_ERROR = 'GET_HIST_COUNTRY_ERROR'\n\n// Get the global summary up to current day (cumalative)\nexport const getGlobalSummary = () => {\n    return dispatch => {\n        dispatch({\n            type: GET_GLOBALSUMMARY_REQ\n        })\n\n        return axios.get('https://disease.sh/v2/all').then(res => {\n            dispatch({\n                type: GET_GLOBALSUMMARY_SUCCESS,\n                payload: res.data\n            })\n            return axios.get('https://disease.sh/v2/all?yesterday=true').then(res => {\n                dispatch({\n                    type: GET_GLOBALSUMMARY_YESTERDAY_SUCCESS,\n                    payload: res.data\n                })\n            }).catch(err => {\n                dispatch({\n                    type: GET_GLOBALSUMMARY_YESTERDAY_ERROR\n                })\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_GLOBALSUMMARY_ERROR\n            })\n        })\n    }\n}\n\n// Get the global daily cases (cumalative)\nexport const getGlobalDaily = () => {\n    return dispatch => {\n        dispatch({\n            type: GET_GLOBALDAILY_REQ\n        })\n\n        return axios.get('https://disease.sh/v2/historical/all?lastdays=all').then(res => {\n            let data = res.data\n\n            let dates = Object.keys(data.cases)\n            let cases = Object.values(data.cases)\n            let recovered = Object.values(data.recovered)\n            let deaths = Object.values(data.deaths)\n\n            dispatch({\n                type: GET_GLOBALDAILY_SUCCESS,\n                payload: { dates, cases, recovered, deaths }\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_GLOBALDAILY_ERROR\n            })\n        })\n    }\n}\n\n// Get the iso codes for contries\nexport const getCountryCodes = () => {\n    return dispatch => {\n        dispatch({\n            type: GET_COUNTRIES_REQ\n        })\n\n        return axios.get('https://covid19.mathdro.id/api/countries').then(res => {\n            dispatch({\n                type: GET_COUNTRIES_SUCCESS,\n                payload: res.data\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_COUNTRIES_ERROR\n            })\n        })\n    }\n}\n\n// Get the individual stats for a country\nexport const getCountryStats = (isoCode, countryText) => {\n    return dispatch => {\n        dispatch({\n            type: GET_COUNTRY_STATS_REQ\n        })\n\n        return axios.get('https://disease.sh/v2/countries/' + isoCode).then(res => {\n            dispatch({\n                type: GET_COUNTRY_STATS_SUCCESS,\n                payload: { ...res.data, countryText: countryText, selectedCountry: isoCode }\n            })\n\n            return axios.get('https://disease.sh/v2/countries/' + isoCode + '?yesterday=true').then(res => {\n                dispatch({\n                    type: GET_COUNTRY_YESTERDAY_STATS_SUCCESS,\n                    payload: { ...res.data }\n                })\n            }).catch(err => {\n                dispatch({\n                    type: GET_COUNTRY_YESTERDAY_STATS_ERROR,\n                })\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_COUNTRY_STATS_ERROR,\n                payload: { countryText: countryText, selectedCountry: isoCode }\n            })\n        })\n\n    }\n}\n\n\n// Get the region stats for a country (if any)\nexport const getCountryRegionStats = (isoCode) => {\n    return dispatch => {\n        dispatch({\n            type: GET_COUNTRYREGION_REQ\n        })\n\n        return axios.get('https://covid19.mathdro.id/api/countries/' + isoCode + '/confirmed').then(res => {\n            dispatch({\n                type: GET_COUNTRYREGION_SUCCESS,\n                payload: res.data\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_COUNTRYREGION_ERROR\n            })\n        })\n    }\n}\n\n// Get the stats for each country\nexport const getAllCountryStats = () => {\n    return dispatch => {\n        dispatch({\n            type: GET_ALL_COUNTRY_REQ\n        })\n\n        return axios.get('https://disease.sh/v2/countries/').then(res => {\n            dispatch({\n                type: GET_ALL_COUNTRY_SUCCESS,\n                payload: res.data\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_ALL_COUNTRY_ERROR\n            })\n        })\n    }\n}\n\n\n\n// Get the historical stats for a country\nexport const getCountryHistory = (isoCode) => {\n    return dispatch => {\n        dispatch({\n            type: GET_HIST_COUNTRY_REQ\n        })\n\n        return axios.get('https://disease.sh/v2/historical/' + isoCode + '?lastdays=all').then(res => {\n            let data = res.data\n\n            let dates = Object.keys(data.timeline.cases)\n            let cases = Object.values(data.timeline.cases)\n            let recovered = Object.values(data.timeline.recovered)\n            let deaths = Object.values(data.timeline.deaths)\n\n            dispatch({\n                type: GET_HIST_COUNTRY_SUCCESS,\n                payload: { dates, cases, recovered, deaths }\n            })\n        }).catch(err => {\n            dispatch({\n                type: GET_HIST_COUNTRY_ERROR\n            })\n        })\n    }\n}","import { combineReducers } from \"redux\"\nimport { \n    GET_GLOBALDAILY_ERROR,\n    GET_GLOBALDAILY_SUCCESS,\n    GET_GLOBALDAILY_REQ,\n    GET_GLOBALSUMMARY_ERROR,\n    GET_GLOBALSUMMARY_REQ,\n    GET_GLOBALSUMMARY_SUCCESS,\n    GET_GLOBALSUMMARY_YESTERDAY_ERROR,\n    GET_GLOBALSUMMARY_YESTERDAY_SUCCESS,\n    GET_COUNTRIES_ERROR,\n    GET_COUNTRIES_REQ,\n    GET_COUNTRIES_SUCCESS,\n    GET_COUNTRY_STATS_ERROR,\n    GET_COUNTRY_STATS_REQ,\n    GET_COUNTRY_STATS_SUCCESS,\n    GET_COUNTRY_YESTERDAY_STATS_ERROR,\n    GET_COUNTRY_YESTERDAY_STATS_SUCCESS,\n    GET_COUNTRYREGION_ERROR,\n    GET_COUNTRYREGION_REQ,\n    GET_COUNTRYREGION_SUCCESS,\n    GET_ALL_COUNTRY_ERROR,\n    GET_ALL_COUNTRY_REQ,\n    GET_ALL_COUNTRY_SUCCESS,\n    GET_HIST_COUNTRY_ERROR,\n    GET_HIST_COUNTRY_REQ,\n    GET_HIST_COUNTRY_SUCCESS\n} from '../actions/covid'\n\nconst initialStateGlobalDaily = {\n    dates: [],\n    cases: [],\n    recovered: [],\n    deaths: [],\n    isLoading: true\n}\n\nconst initialStateCountryHistory = {\n    dates: [],\n    cases: [],\n    recovered: [],\n    deaths: [],\n    isLoading: true\n}\n\nconst initialStateStats = {\n    yesterday: {\n        cases: 0,\n        recovered: 0,\n        deaths: 0,\n        critical: 0,\n        isLoading: true,\n    },\n    cases: 0,\n    recovered: 0,\n    deaths: 0,\n    critical: 0,\n    isLoading: true,\n    error: '',\n    countryText: '',\n    selectedCountry: '',\n    updated: '',\n}\n\n\nconst initialStateCountryCodes = {\n    countryList: [],\n    isLoading: true\n}\n\nconst initialStateAllCountry = {\n    countryList: [],\n    isLoading: true\n}\n\nconst initialStateCountryRegion = {\n    regionList: [],\n    isLoading: true\n}\n\nconst globalSummaryReducer = (state = initialStateStats, action) => {\n    switch (action.type) {\n        case GET_GLOBALSUMMARY_REQ:\n            return {\n                ...state,\n                isLoading: true,\n            }\n        case GET_GLOBALSUMMARY_SUCCESS:\n            return {\n                ...action.payload,\n                isLoading: false\n            }\n        case GET_GLOBALSUMMARY_YESTERDAY_SUCCESS:\n            return {\n                ...state,\n                yesterday : { isLoading: false, ...action.payload },\n            }\n        case GET_GLOBALSUMMARY_YESTERDAY_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n                error: ''\n            }\n        case GET_GLOBALSUMMARY_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n            }\n        default:\n            return state\n    }\n}\n\nconst globalDailyReducer = (state = initialStateGlobalDaily, action) => {\n    switch (action.type) {\n        case GET_GLOBALDAILY_REQ:\n            return {\n                ...state,\n                isLoading: true,\n            }\n        case GET_GLOBALDAILY_SUCCESS:\n            return {\n                ...action.payload,\n                isLoading: false\n            }\n        case GET_GLOBALDAILY_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n            }\n        default:\n            return state\n    }\n}\n\nconst countryCodesReducer = (state = initialStateCountryCodes, action) => {\n    switch (action.type) {\n        case GET_COUNTRIES_REQ:\n            return {\n                ...state,\n                isLoading: true,\n            }\n        case GET_COUNTRIES_SUCCESS:\n            return {\n                countryList: action.payload.countries,\n                isLoading: false\n            }\n        case GET_COUNTRIES_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n            }\n        default:\n            return state\n    }\n}\n\nconst countryStatsReducer = (state = initialStateStats, action) => {\n    switch (action.type) {\n        case GET_COUNTRY_STATS_REQ:\n            return {\n                ...state,\n                ...initialStateStats,\n                isLoading: true,\n                error: ''\n            }\n        case GET_COUNTRY_STATS_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n                isLoading: false,\n                error: ''\n            }\n        case GET_COUNTRY_YESTERDAY_STATS_SUCCESS:\n            return {\n                ...state,\n                yesterday : { isLoading: false, ...action.payload },\n            }\n        case GET_COUNTRY_STATS_ERROR:\n            return {\n                ...initialStateStats,\n                ...action.payload,\n                isLoading: false,\n                selectedCountry: action.payload.selectedCountry,\n                error: 'Could not find stats for selected country.'\n            }\n        case GET_COUNTRY_YESTERDAY_STATS_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n                error: ''\n            }\n        default:\n            return state\n    }\n}\n\n\nconst countryRegionStatsReducer = (state = initialStateCountryRegion, action) => {\n    switch (action.type) {\n        case GET_COUNTRYREGION_REQ:\n            return {\n                ...state,\n                isLoading: true,\n                error: ''\n            }\n        case GET_COUNTRYREGION_SUCCESS:\n            return {\n                regionList : action.payload,\n                isLoading: false,\n                error: ''\n            }\n        case GET_COUNTRYREGION_ERROR:\n            return {\n                ...initialStateCountryRegion,\n                isLoading: false,\n                error: ''\n            }\n        default:\n            return state\n    }\n}\n\nconst allCountryReducer = (state = initialStateAllCountry, action) => {\n    switch (action.type) {\n        case GET_ALL_COUNTRY_REQ:\n            return {\n                ...state,\n                isLoading: true,\n                error: ''\n            }\n        case GET_ALL_COUNTRY_SUCCESS:\n            return {\n                countryList : action.payload,\n                isLoading: false,\n                error: ''\n            }\n        case GET_ALL_COUNTRY_ERROR:\n            return {\n                ...initialStateAllCountry,\n                isLoading: false,\n                error: ''\n            }\n        default:\n            return state\n    }\n}\n\nconst countryHistoryReducer = (state = initialStateCountryHistory, action) => {\n    switch (action.type) {\n        case GET_HIST_COUNTRY_REQ:\n            return {\n                ...state,\n                isLoading: true,\n                error: false\n            }\n        case GET_HIST_COUNTRY_SUCCESS:\n            return {\n                ...action.payload,\n                isLoading: false,\n                error: false\n            }\n        case GET_HIST_COUNTRY_ERROR:\n            return {\n                ...initialStateCountryHistory,\n                isLoading: false,\n                error: true\n            }\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({ \n    globalDaily: globalDailyReducer,\n    globalSummary: globalSummaryReducer,\n    countryCodes: countryCodesReducer,\n    countryStats: countryStatsReducer,\n    countryRegion: countryRegionStatsReducer,\n    allCountry: allCountryReducer,\n    countryHistory: countryHistoryReducer\n})","// Used to store actions to keep state between pages, ex active nav bar item\r\n\r\nexport const UPDATE_NAVBAR = 'UPDATE_NAVBAR'\r\nexport const UPDATE_TABLE_PAGE = 'UPDATE_TABLE_PAGE'\r\nexport const UPDATE_COUNTRY_NAV = 'UPDATE_COUNTRY_NAV'\r\n\r\nexport const updateNavbar = (item) => ({\r\n    type: UPDATE_NAVBAR,\r\n    payload: item\r\n})\r\n\r\nexport const updateTablePage = (item) => ({\r\n    type: UPDATE_TABLE_PAGE,\r\n    payload: item\r\n})\r\n\r\nexport const updateCountryNavOption = (item) => ({\r\n    type: UPDATE_COUNTRY_NAV,\r\n    payload: item\r\n})","import { combineReducers } from \"redux\"\nimport { \n    UPDATE_NAVBAR,\n    UPDATE_TABLE_PAGE,\n    UPDATE_COUNTRY_NAV\n} from '../actions/global'\n\nconst initialStateNavbar = {\n    selected: 'global',\n}\n\nconst initialStateTablePage = {\n    selected: 'cards'\n}\n\nconst initialStateCountryNav = {\n    selected: 'region'\n}\n\nconst updateNavbarReducer = (state = initialStateNavbar, action) => {\n    switch (action.type) {\n        case UPDATE_NAVBAR:\n            return {\n                ...state,\n                selected: action.payload,\n            }\n        default:\n            return state\n    }\n}\n\nconst updateTablePageReducer = (state = initialStateTablePage, action) => {\n    switch (action.type) {\n        case UPDATE_TABLE_PAGE:\n            return {\n                ...state,\n                selected: action.payload,\n            }\n        default:\n            return state\n    }\n}\n\nconst updateCountryNavReducer = (state = initialStateCountryNav, action) => {\n    switch (action.type) {\n        case UPDATE_COUNTRY_NAV:\n            return {\n                ...state,\n                selected: action.payload,\n            }\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({ \n    navbar: updateNavbarReducer,\n    tablePage: updateTablePageReducer,\n    countryNav: updateCountryNavReducer\n})","import { createStore, applyMiddleware, compose } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport createRootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { createBrowserHistory } from 'history'\n\nexport const history = createBrowserHistory(\n  {\n    basename: process.env.PUBLIC_URL\n  }\n)\n\nconst initialState = {}\nconst enhancers = []\nconst middleware = [thunk, routerMiddleware(history)]\n\nif (process.env.NODE_ENV === 'development') {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension())\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n)\n\nexport default createStore(\n  createRootReducer(history),\n  initialState,\n  composedEnhancers\n)\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Statistic } from 'semantic-ui-react'\r\nimport { Paper } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\n\r\nclass GlobalCards extends Component {\r\n\r\n  shouldLoadLabel(cases) {\r\n    if (cases !== 0) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  render() {\r\n\r\n    let recoverPercentage = \"\"\r\n    let deathPercentage = \"\"\r\n    let yesterdayCases = 0\r\n    let yesterdayDeaths = 0\r\n    let yesterdayRecovered = 0\r\n\r\n    if (this.props.recovered !== 0) {\r\n      recoverPercentage = ((this.props.recovered / this.props.confirmed)*100).toFixed(1)\r\n      deathPercentage = ((this.props.deaths / this.props.confirmed)*100).toFixed(1)\r\n      recoverPercentage = \"(\" + recoverPercentage + \"%)\"\r\n      deathPercentage = \"(\" + deathPercentage + \"%)\"\r\n\r\n      if (this.props.yesterday !== undefined && !this.props.yesterday.isLoading && !this.props.isLoading) {\r\n        if (this.props.yesterday.cases !== 0) {\r\n          yesterdayCases = this.props.confirmed - this.props.yesterday.cases\r\n        }\r\n  \r\n        if (this.props.yesterday.deaths !== 0) {\r\n          yesterdayDeaths = this.props.deaths - this.props.yesterday.deaths\r\n        }\r\n  \r\n        if (this.props.yesterday.recovered !== 0) {\r\n          yesterdayRecovered = this.props.recovered - this.props.yesterday.recovered\r\n        }\r\n      }\r\n      \r\n    }\r\n\r\n    \r\n   \r\n    return (\r\n      <div className={this.props.className}>\r\n      \r\n        <Paper className='statSubBox'>\r\n          <Statistic color='blue' >\r\n            <Statistic.Value>\r\n              <CountUp\r\n                start={0}\r\n                end={this.props.confirmed}\r\n                duration={1}\r\n                separator=','\r\n                delay={0}\r\n              >\r\n                {({ countUpRef }) => (\r\n                  <div>\r\n                    <span ref={countUpRef} />\r\n                  </div>\r\n                )}\r\n              </CountUp>\r\n            </Statistic.Value>\r\n\r\n            <Statistic.Label>Confirmed Cases</Statistic.Label>\r\n            {this.shouldLoadLabel(yesterdayCases) &&\r\n              <CountUp\r\n                start={0}\r\n                end={yesterdayCases}\r\n                duration={1}\r\n                separator=','\r\n                delay={0}\r\n                useEasing={true}\r\n              >\r\n                {({ countUpRef }) => (\r\n                  <p className='blue'>\r\n                    <b>+<span ref={countUpRef}/> Today </b>\r\n                  </p>\r\n                )}\r\n              </CountUp>\r\n            }\r\n          </Statistic>\r\n        </Paper>\r\n\r\n        <Paper className='statSubBox'>\r\n          <Statistic color='red'>\r\n            <Statistic.Value>\r\n              <CountUp\r\n                  start={0}\r\n                  end={this.props.deaths}\r\n                  duration={1}\r\n                  separator=','\r\n                  delay={0}\r\n                >\r\n                  {({ countUpRef }) => (\r\n                    <div>\r\n                      <span ref={countUpRef}/>\r\n                    </div>\r\n                  )}\r\n                </CountUp>\r\n            </Statistic.Value>\r\n            <Statistic.Label>Deaths {deathPercentage}</Statistic.Label>\r\n            {this.shouldLoadLabel(yesterdayDeaths) &&\r\n              <CountUp\r\n                start={0}\r\n                end={yesterdayDeaths}\r\n                duration={1}\r\n                separator=','\r\n                delay={0}\r\n                useEasing={true}\r\n              >\r\n                {({ countUpRef }) => (\r\n                  <p className='red'>\r\n                    <b>+<span ref={countUpRef}/> Today </b>\r\n                  </p>\r\n                )}\r\n              </CountUp>\r\n            }\r\n          </Statistic>\r\n        </Paper>\r\n        \r\n        <Paper className='statSubBox'>\r\n          <Statistic color='green'>\r\n            <Statistic.Value>\r\n              <CountUp\r\n                start={0}\r\n                end={this.props.recovered}\r\n                duration={0.7}\r\n                separator=','\r\n                delay={0}\r\n                useEasing={true}\r\n              >\r\n                {({ countUpRef }) => (\r\n                  <div>\r\n                    <span ref={countUpRef} />\r\n                  </div>\r\n                )}\r\n              </CountUp>\r\n            </Statistic.Value>\r\n            <Statistic.Label>Recovered {recoverPercentage}</Statistic.Label>\r\n            {this.shouldLoadLabel(yesterdayRecovered) &&\r\n              <CountUp\r\n                start={0}\r\n                end={yesterdayRecovered}\r\n                duration={1}\r\n                separator=','\r\n                delay={0}\r\n                useEasing={true}\r\n              >\r\n                {({ countUpRef }) => (\r\n                  <p className='green'>\r\n                    <b>+<span ref={countUpRef}/> Today </b>\r\n                  </p>\r\n                )}\r\n              </CountUp>\r\n            }\r\n          </Statistic>\r\n        </Paper>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({  }) => ({})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(GlobalCards)\r\n","import React, {Component, Button} from 'react';\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { push, goBack } from 'connected-react-router'\nimport { getGlobalDaily, getGlobalSummary } from '../../actions/covid'\nimport { Divider, Header, Icon,\n         Dimmer, Loader, Segment } from 'semantic-ui-react'\nimport { Paper } from '@material-ui/core'\nimport GlobalCards from '../../components/GlobalCards'\nimport { Line } from 'react-chartjs-2';\nimport Moment from 'react-moment';\n\n\nclass GlobalSummaryPage extends Component {\n\n  componentDidMount = () => {\n    if (this.props.globalSummary.isLoading) {\n      this.props.getGlobalSummary()\n    }\n\n    if (this.props.globalSummary.isLoading) {\n      this.props.getGlobalDaily()\n    }\n  }\n\n  render() {\n    let dateLabels = []\n    let cases = []\n    let recovered = []\n    let deaths = []\n    if (this.props.globalDaily.isLoading === false) {\n      dateLabels = this.props.globalDaily.dates\n      cases = this.props.globalDaily.cases\n      recovered = this.props.globalDaily.recovered\n      deaths = this.props.globalDaily.deaths\n    }\n\n    const data = {\n      labels: dateLabels,\n      datasets: [\n        {\n          label: 'Confirmed Cases',\n          fill: '+1',\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 15,\n          data: cases\n        },\n        {\n          label: 'Recoveries',\n          fill: '+1',\n          lineTension: 0.1,\n          backgroundColor: 'rgba(50,205,50,0.4)',\n          borderColor: 'rgba(50,205,50,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(50,205,50,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(50,205,50,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 15,\n          data: recovered\n        },\n        {\n          label: 'Deaths',\n          fill: 'origin',\n          lineTension: 0.1,\n          backgroundColor: 'rgba(220,20,60,0.4)',\n          borderColor: 'rgba(220,20,60,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(220,20,60,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(220,20,60,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 15,\n          data: deaths\n        }\n      ]\n    }\n\n    // used to show empty chart while data loads\n    const dummyData = {\n      datasets: [{label:'', data: [0,5000,5000,4500000]}]\n    }\n\n    const options = {\n        title: {\n          display: true,\n          text: 'Number of Confirmed Cases since Jan 22',\n          fontSize: 20,\n          fontColor: '#000000'\n        },\n        responsive: true,\n        animation: {\n          duration: 1500,\n          easing: 'easeOutQuart'\n        },\n        tooltips: {\n          // Overrides the global setting\n          mode: 'label'\n        }\n    }\n\n    return (\n      <div>\n        <Divider horizontal>\n          <Header as='h4'>\n            <Icon name='globe' />\n            Global Cases Summary\n          </Header>\n        </Divider>\n\n        <Header as='h5' textAlign='center'>\n          <p>\n            Last updated: &nbsp;\n            {this.props.globalSummary.updated && (\n              <Moment fromNow>\n                {this.props.globalSummary.updated}\n              </Moment>\n            )}\n          </p>\n        </Header>\n\n        <Segment basic>\n          {this.props.globalSummary.isLoading && \n            <Dimmer active inverted >\n              <Loader inverted>Loading</Loader>\n            </Dimmer>\n          }\n          <GlobalCards \n            className='statsBox'\n            yesterday={this.props.globalSummary.yesterday}\n            confirmed={this.props.globalSummary.cases}\n            recovered={this.props.globalSummary.recovered}\n            deaths={this.props.globalSummary.deaths}\n          />\n        </Segment>\n\n        <Paper className=\"globalCasesChart\">\n          {this.props.globalDaily.isLoading ? (\n            <Segment>\n              <Dimmer active inverted >\n                <Loader inverted>Loading</Loader>\n              </Dimmer>\n              <Line data={dummyData} options={options} />\n            </Segment>\n          ): (\n            <Line data={data} options={options} />\n          )}\n          \n        </Paper>\n      </div>\n    )\n  }\n}\n  \nconst mapStateToProps = ({ covid }) => ({\n  globalSummary: covid.globalSummary,\n  globalDaily: covid.globalDaily\n})\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      push,\n      goBack,\n      getGlobalDaily,\n      getGlobalSummary\n    },\n    dispatch\n  )\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GlobalSummaryPage)\n","import React from 'react';\r\nimport { forwardRef } from 'react';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nexport default {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};","import React, {Component } from 'react';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { getCountryCodes, getCountryStats, getCountryRegionStats, getCountryHistory } from '../../actions/covid'\r\nimport { updateCountryNavOption } from '../../actions/global'\r\nimport { Divider, Header, Icon, Dropdown,\r\n         Dimmer, Loader, Segment, Message,\r\n         Menu } from 'semantic-ui-react'\r\nimport { Paper } from '@material-ui/core'\r\nimport { Line } from 'react-chartjs-2';\r\nimport GlobalCards from '../../components/GlobalCards'\r\nimport Moment from 'react-moment';\r\nimport MaterialTable from \"material-table\";\r\nimport TableIcons from '../../components/TableIcons'\r\n\r\n\r\nclass CountryPage extends Component {\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.countryCodes.isLoading || this.props.countryCodes.countryList === undefined) {\r\n      this.props.getCountryCodes()\r\n      this.props.getCountryStats('ca', 'Canada') // default value is Canada 'ca'\r\n      this.props.getCountryRegionStats('ca')\r\n    }\r\n\r\n    if (this.props.countryHistory.isLoading || this.props.countryHistory.cases === undefined || this.props.countryHistory.cases.length === 0) {\r\n      this.props.getCountryHistory('ca')\r\n    }\r\n  }\r\n\r\n  getCountryObject = (country) => {\r\n    return {\r\n      key : country.iso2.toLowerCase(),\r\n      value : country.iso2.toLowerCase(),\r\n      flag: country.iso2.toLowerCase(),\r\n      text: country.name\r\n    }\r\n  }\r\n\r\n  getRegionObject = (region) => {\r\n    return {\r\n      provinceState : region.provinceState,\r\n      confirmed : region.confirmed,\r\n      active : region.active,\r\n      recovered : region.recovered,\r\n      deaths : region.deaths\r\n    }\r\n  }\r\n\r\n  getFilterRegions = (regionList) => {\r\n    var filteredRegions = {}\r\n    for (var i = 0; i < regionList.length; i++) {\r\n      if (regionList[i].provinceState in filteredRegions && (regionList[i].confirmed > filteredRegions[regionList[i].provinceState].confirmed)) {\r\n        filteredRegions[regionList[i].provinceState] = regionList[i]\r\n      } else if (!(regionList[i].provinceState in filteredRegions)) {\r\n        filteredRegions[regionList[i].provinceState] = regionList[i]\r\n      }\r\n\r\n      var regionObj = filteredRegions[regionList[i].provinceState]\r\n      if (regionObj.recovered === 0) {\r\n        filteredRegions[regionList[i].provinceState].recovered = 'No data'\r\n      }\r\n\r\n    }\r\n    return Object.values(filteredRegions)\r\n  }\r\n\r\n\r\n  handleDropdown = (e, {value}) => {\r\n    var isoCode = value\r\n    this.props.getCountryStats(isoCode, e.target.textContent)\r\n    this.props.getCountryRegionStats(isoCode)\r\n    this.props.getCountryHistory(isoCode)\r\n  }\r\n\r\n  handleItemClick = (e, {name}) => {\r\n    this.props.updateCountryNavOption(name)\r\n  }\r\n\r\n  render() {\r\n    var countries = []\r\n    var countryOptions = []\r\n    if (!this.props.countryCodes.isLoading &&\r\n      this.props.countryCodes.countryList !== undefined &&\r\n      this.props.countryCodes.countryList.length !== 0) {\r\n      countries = this.props.countryCodes.countryList\r\n      for (var i = 0; i < countries.length; i++) {\r\n        if (countries[i].iso2 !== undefined) {\r\n          if (countries[i].name === 'US') {\r\n            countries[i].name = 'United States'\r\n          }\r\n          countryOptions.push(this.getCountryObject(countries[i]))\r\n        }\r\n      }\r\n    }\r\n\r\n    var tableData = []\r\n    var regions = []\r\n    var tableLength = 0\r\n    if (!this.props.countryRegion.isLoading &&\r\n        this.props.countryRegion.regionList !== undefined &&\r\n        this.props.countryRegion.regionList.length !== 0) {\r\n      regions = this.props.countryRegion.regionList\r\n      for (var i = 0; i < regions.length; i++) {\r\n        tableData.push(this.getRegionObject(regions[i]))\r\n      }\r\n      \r\n      tableData = this.getFilterRegions(tableData)\r\n      tableLength = tableData.length\r\n      if (tableLength === 1) {\r\n        // No region stats available\r\n        tableData = []\r\n      }\r\n    }\r\n\r\n    let cases = this.props.countryHistory.cases\r\n    let recovered = this.props.countryHistory.recovered\r\n    let deaths = this.props.countryHistory.deaths\r\n    let dateLabels = this.props.countryHistory.dates\r\n\r\n    const data = {\r\n      labels: dateLabels,\r\n      datasets: [\r\n        {\r\n          label: 'Confirmed Cases',\r\n          fill: '+1',\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 15,\r\n          data: cases\r\n        },\r\n        {\r\n          label: 'Recoveries',\r\n          fill: '+1',\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(50,205,50,0.4)',\r\n          borderColor: 'rgba(50,205,50,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(50,205,50,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(50,205,50,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 15,\r\n          data: recovered\r\n        },\r\n        {\r\n          label: 'Deaths',\r\n          fill: 'origin',\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(220,20,60,0.4)',\r\n          borderColor: 'rgba(220,20,60,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(220,20,60,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(220,20,60,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 15,\r\n          data: deaths\r\n        }\r\n      ]\r\n    }\r\n\r\n    // used to show empty chart while data loads\r\n    const dummyData = {\r\n      datasets: [{label:'', data: [0,100,5000,50000]}]\r\n    }\r\n\r\n    const options = {\r\n        title: {\r\n          display: true,\r\n          text: this.props.countryStats.countryText + ' - Cases, Recoveries, and Deaths Since Jan 2020' ,\r\n          fontSize: 20,\r\n          fontColor: '#000000'\r\n        },\r\n        responsive: true,\r\n        animation: {\r\n          duration: 1500,\r\n          easing: 'easeOutQuart'\r\n        },\r\n        tooltips: {\r\n          // Overrides the global setting\r\n          mode: 'label'\r\n        }\r\n    }\r\n\r\n    let selected = this.props.countryNav.selected\r\n    return (\r\n      <div>\r\n        <Divider horizontal>\r\n          <Header as='h4'>\r\n            <Icon name='globe' />\r\n            Country Filter\r\n          </Header>\r\n        </Divider>\r\n\r\n        <Dropdown\r\n          className='countryDropdown'\r\n          value={this.props.countryStats.selectedCountry || 'ca'}\r\n          fluid\r\n          search\r\n          selection\r\n          options={countryOptions}\r\n          onChange={this.handleDropdown}\r\n        />\r\n\r\n        {this.props.countryStats.error && (\r\n          <Message negative className='errorMessageCountry'>\r\n            <Message.Header>Could not find stats for selected country.</Message.Header>\r\n          </Message>\r\n        )}\r\n\r\n        <Header as='h1' textAlign='center'>Stats for {this.props.countryStats.countryText}</Header>\r\n        <Header as='h5' textAlign='center'>\r\n          <p>\r\n            Last updated: &nbsp;\r\n            {this.props.countryStats.updated && (\r\n              <Moment fromNow>\r\n                {this.props.countryStats.updated}\r\n              </Moment>\r\n            )}\r\n          </p>\r\n        </Header>\r\n\r\n        <Segment basic>\r\n          {this.props.countryStats.isLoading ? (\r\n            <Dimmer active inverted>\r\n              <Loader inverted>Loading</Loader>\r\n            </Dimmer>\r\n          ) : <div/>}\r\n          <GlobalCards \r\n            className='statsBox'\r\n            isLoading={this.props.countryStats.isLoading}\r\n            yesterday={this.props.countryStats.yesterday}\r\n            confirmed={this.props.countryStats.cases}\r\n            recovered={this.props.countryStats.recovered}\r\n            deaths={this.props.countryStats.deaths}\r\n          />\r\n        </Segment>\r\n\r\n        <Menu className='menuBar' secondary>\r\n          <Menu.Item\r\n            name='region'\r\n            active={selected === 'region'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            Region Chart\r\n          </Menu.Item>\r\n\r\n          <Menu.Item\r\n            name='graph'\r\n            active={selected === 'graph'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            Graph View\r\n          </Menu.Item>\r\n        </Menu>\r\n\r\n        {selected === 'region' &&\r\n          <div>\r\n            {this.props.countryRegion.regionList.length === 1 && (\r\n              <Header color='red' as='h5' textAlign='center'>No region stats available for this country</Header>\r\n            )}\r\n            <Paper className='regionTable'>\r\n              <MaterialTable\r\n                isLoading={this.props.countryRegion.isLoading}\r\n                options={{\r\n                  rowStyle: {\r\n                    height: '50px'\r\n                  },\r\n                  padding: 'dense',\r\n                  sorting: true,\r\n                  pageSize: 7,\r\n                }}\r\n                icons={TableIcons}\r\n                columns={[\r\n                  { title: \"Province/State\", field: \"provinceState\" },\r\n                  { title: \"Total Cases\", field: \"confirmed\" },\r\n                  { title: \"Active\", field: \"active\" },\r\n                  { title: \"Recovered\", field: \"recovered\" },\r\n                  { title: \"Deaths\", field: \"deaths\" }\r\n                ]}\r\n                data={ tableData }\r\n                title={\"Region Stats for \" + this.props.countryStats.countryText}\r\n              />\r\n            </Paper>\r\n          </div>\r\n        }\r\n\r\n        {selected === 'graph' &&\r\n          <div>\r\n            {this.props.countryHistory.error && (\r\n              <Header color='red' as='h5' textAlign='center'>No historical stats available for this country</Header>\r\n            )}\r\n            <Paper className=\"globalCasesChart\">\r\n              {this.props.countryHistory.isLoading ? (\r\n                <Segment>\r\n                  <Dimmer active inverted >\r\n                    <Loader inverted>Loading</Loader>\r\n                  </Dimmer>\r\n                  <Line data={dummyData} options={options} />\r\n                </Segment>\r\n              ): (\r\n                <Line data={data} options={options} />\r\n              )}\r\n              \r\n            </Paper>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n  \r\nconst mapStateToProps = ({ covid, global }) => ({\r\n  countryCodes: covid.countryCodes,\r\n  countryStats: covid.countryStats,\r\n  countryRegion: covid.countryRegion,\r\n  countryNav: global.countryNav,\r\n  countryHistory: covid.countryHistory\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      getCountryCodes,\r\n      getCountryStats,\r\n      getCountryRegionStats,\r\n      getCountryHistory,\r\n      updateCountryNavOption\r\n    },\r\n    dispatch\r\n  )\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CountryPage)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Image, Divider } from 'semantic-ui-react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\n\r\n\r\nclass CountryCard extends Component {\r\n\r\n  numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.props.country === undefined || this.props.country == null) {\r\n      return <div></div>\r\n    }\r\n\r\n    return (\r\n      <Card className='countryCard' variant=\"outlined\">\r\n        <CardContent>\r\n          <Typography variant=\"subtitle1\" component=\"h2\">\r\n            <Image src={this.props.country.flag} size='mini' inline />&nbsp; &nbsp;{this.props.country.country}\r\n          </Typography>\r\n          <Divider/>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            Total Cases: <b className='blue'>{this.numberWithCommas(this.props.country.cases)}</b>\r\n            <br/>\r\n            Recovered: <b className='green'>{this.numberWithCommas(this.props.country.recovered)}</b>\r\n            <br/>\r\n            Deaths: <b className='red'>{this.numberWithCommas(this.props.country.deaths)}</b>\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({  }) => ({})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(CountryCard)\r\n","import React, {Component, Button} from 'react';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { getAllCountryStats } from '../../actions/covid'\r\nimport { updateTablePage } from '../../actions/global'\r\nimport { Divider, Header, Icon, Flag, Menu } from 'semantic-ui-react'\r\nimport { Paper } from '@material-ui/core';\r\nimport Moment from 'react-moment';\r\nimport MaterialTable from \"material-table\";\r\nimport TableIcons from '../../components/TableIcons'\r\nimport CountryCard from '../../components/CountryCard';\r\n\r\n\r\nclass GlobalTablePage extends Component {\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.allCountry.isLoading || this.props.allCountry.countryList === undefined || this.props.allCountry.countryList.length === 0) {\r\n      this.props.getAllCountryStats()\r\n    }\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    this.props.updateTablePage(name)\r\n  }\r\n\r\n\r\n  getCountryObject = (country) => {\r\n    if (country.countryInfo.iso2 === null || country.countryInfo.iso2 === undefined) {\r\n      country.countryInfo.iso2 = ''\r\n    }\r\n\r\n    if (country.countryInfo.flag === null || country.countryInfo.flag === undefined) {\r\n      country.countryInfo.flag = ''\r\n    }\r\n\r\n    return {\r\n      flag : country.countryInfo.flag,\r\n      iso : country.countryInfo.iso2.toLowerCase(),\r\n      country : country.country,\r\n      cases : country.cases,\r\n      active : country.active,\r\n      recovered : country.recovered,\r\n      deaths : country.deaths\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    var tableData = []\r\n    var lastUpdated = ''\r\n    if (!this.props.allCountry.isLoading &&\r\n        this.props.allCountry.countryList !== undefined &&\r\n        this.props.allCountry.countryList.length !== 0) {\r\n\r\n\r\n      var countryList = this.props.allCountry.countryList\r\n      lastUpdated = countryList[0].updated\r\n\r\n      // clean the data\r\n      for (var i = 0; i < countryList.length; i++) {\r\n        if (countryList[i].recovered === 0) {\r\n          countryList[i].recovered = 'No data'\r\n        }\r\n        if (countryList[i].iso2 === 'US') {\r\n          countryList[i].countryRegion = 'United States'\r\n        }\r\n        tableData.push(this.getCountryObject(countryList[i]))\r\n      }\r\n      \r\n      // sort by total cases\r\n      tableData.sort( (a,b) => { return b.cases - a.cases })\r\n    }\r\n\r\n    let selected = this.props.tablePage.selected\r\n    return (\r\n      <div>\r\n        <Divider horizontal>\r\n          <Header as='h4'>\r\n            <Icon name='globe' />\r\n            Global Cases per Country\r\n          </Header>\r\n        </Divider>\r\n\r\n        <Menu className='menuBar' secondary>\r\n          <Menu.Item\r\n            name='cards'\r\n            active={selected === 'cards'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            Card View\r\n          </Menu.Item>\r\n\r\n          <Menu.Item\r\n            name='table'\r\n            active={selected === 'table'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            Table View\r\n          </Menu.Item>\r\n        </Menu>\r\n\r\n        <Header as='h5' textAlign='center'>\r\n          <p>\r\n            Last updated: &nbsp;\r\n            {lastUpdated && (\r\n              <Moment fromNow>\r\n                {lastUpdated}\r\n              </Moment>\r\n            )}\r\n          </p>\r\n        </Header>\r\n\r\n        \r\n        {selected === 'table' ? (\r\n          <Paper className='globalTable'>\r\n            <MaterialTable\r\n              isLoading={this.props.allCountry.isLoading}\r\n              options={{\r\n                rowStyle: {\r\n                  height: '50px'\r\n                },\r\n                padding: 'dense',\r\n                sorting: true,\r\n                pageSize: 7,\r\n              }}\r\n              icons={TableIcons}\r\n              columns={[\r\n                { \r\n                  title: \"Country\", field: \"country\", render: rowData => \r\n                  <p><Flag name={rowData.iso} /> {rowData.country}</p>\r\n                },\r\n                { title: \"Total Cases\", field: \"cases\", defaultSort: \"desc\" },\r\n                { title: \"Active\", field: \"active\" },\r\n                { title: \"Recovered\", field: \"recovered\" },\r\n                { title: \"Deaths\", field: \"deaths\" }\r\n              ]}\r\n              data={ tableData }\r\n              title={\"Global Country Stats\"}\r\n            />\r\n          </Paper>\r\n        ) : (\r\n          <div className='countryCardList'>\r\n            {tableData.map(country => {\r\n              return <CountryCard country={country}></CountryCard>\r\n            })}\r\n            \r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n  \r\nconst mapStateToProps = ({ global, covid }) => ({\r\n  tablePage: global.tablePage,\r\n  allCountry: covid.allCountry\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      getAllCountryStats,\r\n      updateTablePage\r\n    },\r\n    dispatch\r\n  )\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GlobalTablePage)\r\n","import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { Route } from 'react-router'\r\nimport GlobalSummaryPage from '../GlobalSummaryPage'\r\nimport CountryPage from '../CountryPage'\r\nimport GlobalTablePage from '../GlobalTablePage'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport { push, goBack } from 'connected-react-router'\r\nimport { updateNavbar } from '../../actions/global'\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount = () => {\r\n    let pathname = this.props.router.pathname\r\n    if (pathname !== undefined || pathname.length > 1) {\r\n      // on refresh, update navbar to correct item based on pathname\r\n      this.props.updateNavbar(pathname.slice(1))\r\n    }\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    this.props.updateNavbar(name)\r\n    if (name !== \"global\") {\r\n      this.props.push('/' + name)\r\n    } else {\r\n      this.props.push('/')\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <h1 className=\"title\">COVID-19 Tracker</h1>\r\n        <Menu className='menuBar' secondary>\r\n          <Menu.Item\r\n            name='global'\r\n            active={this.props.navbar.selected === '' || this.props.navbar.selected === 'global'}\r\n            onClick={this.handleItemClick}\r\n            to=\"/\"\r\n          >\r\n            Global\r\n          </Menu.Item>\r\n\r\n          <Menu.Item\r\n            name='country'\r\n            active={this.props.navbar.selected === 'country'}\r\n            onClick={this.handleItemClick}\r\n            to='/country'\r\n          >\r\n            By Country\r\n          </Menu.Item>\r\n\r\n          <Menu.Item\r\n            name='stats'\r\n            active={this.props.navbar.selected === 'stats'}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            All Stats\r\n          </Menu.Item>\r\n        </Menu>\r\n\r\n        <main>\r\n          <Route exact path=\"/\" component={GlobalSummaryPage} />\r\n          <Route exact path=\"/country\" component={CountryPage} />\r\n          <Route exact path=\"/stats\" component={GlobalTablePage} />\r\n        </main>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ router, global }) => ({\r\n  router: router.location,\r\n  navbar: global.navbar\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      push,\r\n      goBack,\r\n      updateNavbar\r\n    },\r\n    dispatch\r\n  ) \r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store, { history } from './store'\nimport { ConnectedRouter } from 'connected-react-router'\nimport './index.css';\nimport App from './containers/app/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst target = document.querySelector('#root')\n\nrender(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App/>\n    </ConnectedRouter>\n  </Provider>,\n  target\n)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}